{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiContext, useGridRootProps, GridEditModes } from '@mui/x-data-grid-premium';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport InfoIcon from '@mui/icons-material/Info';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\nimport DoneIcon from '@mui/icons-material/Done';\nimport { STATUS_OPTIONS } from '../services/static-data';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction EditStatus(props) {\n  const {\n    id,\n    value,\n    field\n  } = props;\n  const rootProps = useGridRootProps();\n  const apiRef = useGridApiContext();\n  const handleChange = async event => {\n    const isValid = await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: event.target.value\n    });\n    if (isValid && rootProps.editMode === GridEditModes.Cell) {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        cellToFocusAfter: 'below'\n      });\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (reason === 'backdropClick') {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        ignoreModifications: true\n      });\n    }\n  };\n  return /*#__PURE__*/_jsx(Select, {\n    value: value,\n    onChange: handleChange,\n    MenuProps: {\n      onClose: handleClose\n    },\n    sx: {\n      height: '100%',\n      '& .MuiSelect-select': {\n        display: 'flex',\n        alignItems: 'center',\n        pl: 1\n      }\n    },\n    autoFocus: true,\n    fullWidth: true,\n    open: true,\n    children: STATUS_OPTIONS.map(option => {\n      let IconComponent = null;\n      if (option === 'Rejected') {\n        IconComponent = ReportProblemIcon;\n      } else if (option === 'Open') {\n        IconComponent = InfoIcon;\n      } else if (option === 'PartiallyFilled') {\n        IconComponent = AutorenewIcon;\n      } else if (option === 'Filled') {\n        IconComponent = DoneIcon;\n      }\n      let label = option;\n      if (option === 'PartiallyFilled') {\n        label = 'Partially Filled';\n      }\n      return /*#__PURE__*/_jsxs(MenuItem, {\n        value: option,\n        children: [/*#__PURE__*/_jsx(ListItemIcon, {\n          sx: {\n            minWidth: 36\n          },\n          children: /*#__PURE__*/_jsx(IconComponent, {\n            fontSize: \"small\"\n          })\n        }), /*#__PURE__*/_jsx(ListItemText, {\n          primary: label,\n          sx: {\n            overflow: 'hidden'\n          }\n        })]\n      }, option);\n    })\n  });\n}\nexport function renderEditStatus(params) {\n  return /*#__PURE__*/_jsx(EditStatus, _extends({}, params));\n}","map":{"version":3,"names":["_extends","React","useGridApiContext","useGridRootProps","GridEditModes","Select","MenuItem","ListItemIcon","ListItemText","ReportProblemIcon","InfoIcon","AutorenewIcon","DoneIcon","STATUS_OPTIONS","jsx","_jsx","jsxs","_jsxs","EditStatus","props","id","value","field","rootProps","apiRef","handleChange","event","isValid","current","setEditCellValue","target","editMode","Cell","stopCellEditMode","cellToFocusAfter","handleClose","reason","ignoreModifications","onChange","MenuProps","onClose","sx","height","display","alignItems","pl","autoFocus","fullWidth","open","children","map","option","IconComponent","label","minWidth","fontSize","primary","overflow","renderEditStatus","params"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-generator/renderer/renderEditStatus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiContext, useGridRootProps, GridEditModes } from '@mui/x-data-grid-premium';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport InfoIcon from '@mui/icons-material/Info';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\nimport DoneIcon from '@mui/icons-material/Done';\nimport { STATUS_OPTIONS } from '../services/static-data';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction EditStatus(props) {\n  const {\n    id,\n    value,\n    field\n  } = props;\n  const rootProps = useGridRootProps();\n  const apiRef = useGridApiContext();\n  const handleChange = async event => {\n    const isValid = await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: event.target.value\n    });\n    if (isValid && rootProps.editMode === GridEditModes.Cell) {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        cellToFocusAfter: 'below'\n      });\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (reason === 'backdropClick') {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        ignoreModifications: true\n      });\n    }\n  };\n  return /*#__PURE__*/_jsx(Select, {\n    value: value,\n    onChange: handleChange,\n    MenuProps: {\n      onClose: handleClose\n    },\n    sx: {\n      height: '100%',\n      '& .MuiSelect-select': {\n        display: 'flex',\n        alignItems: 'center',\n        pl: 1\n      }\n    },\n    autoFocus: true,\n    fullWidth: true,\n    open: true,\n    children: STATUS_OPTIONS.map(option => {\n      let IconComponent = null;\n      if (option === 'Rejected') {\n        IconComponent = ReportProblemIcon;\n      } else if (option === 'Open') {\n        IconComponent = InfoIcon;\n      } else if (option === 'PartiallyFilled') {\n        IconComponent = AutorenewIcon;\n      } else if (option === 'Filled') {\n        IconComponent = DoneIcon;\n      }\n      let label = option;\n      if (option === 'PartiallyFilled') {\n        label = 'Partially Filled';\n      }\n      return /*#__PURE__*/_jsxs(MenuItem, {\n        value: option,\n        children: [/*#__PURE__*/_jsx(ListItemIcon, {\n          sx: {\n            minWidth: 36\n          },\n          children: /*#__PURE__*/_jsx(IconComponent, {\n            fontSize: \"small\"\n          })\n        }), /*#__PURE__*/_jsx(ListItemText, {\n          primary: label,\n          sx: {\n            overflow: 'hidden'\n          }\n        })]\n      }, option);\n    })\n  });\n}\nexport function renderEditStatus(params) {\n  return /*#__PURE__*/_jsx(EditStatus, _extends({}, params));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}