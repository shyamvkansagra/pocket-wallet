{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n\n/**\n * @requires useGridColumns (method)\n */\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const theme = useTheme();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n    logger.debug(`Start dragging col ${params.field}`);\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    if (event.dataTransfer) {\n      event.dataTransfer.effectAllowed = 'move';\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.unstable_getAllGroupDetails();\n    const getGroupPathFromColumnIndex = colIndex => {\n      const field = allColumns[colIndex].field;\n      return apiRef.current.unstable_getColumnGroupPath(field);\n    };\n\n    // The limitingGroupId is the id of the group from which the dragged column should not escape\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      var _groupsLookup$groupId;\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && getGroupPathFromColumnIndex(columnIndex - 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && getGroupPathFromColumnIndex(columnIndex + 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n      if (limitingGroupId !== null) {\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n        if (leftIndex >= 0 && getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      }\n\n      // Verify we are not splitting another group\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        getGroupPathFromColumnIndex(rightIndex).forEach(groupId => {\n          if (getGroupPathFromColumnIndex(leftIndex).includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2;\n              // moving here split the group groupId in two distincts chunks\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (!dragColField) {\n      return;\n    }\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && (theme.direction === 'rtl' ? dragColIndex < targetColIndex : targetColIndex < dragColIndex);\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && (theme.direction === 'rtl' ? targetColIndex < dragColIndex : dragColIndex < targetColIndex);\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger, theme.direction]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n    logger.debug('End dragging col');\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null;\n\n    // Check if the column was dropped outside the grid.\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    } else {\n      // Emit the columnOrderChange event only once when the reordering stops.\n      const columnOrderChangeParams = {\n        column: apiRef.current.getColumn(dragColField),\n        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(dragColField),\n        oldIndex: originColumnIndex.current\n      };\n      apiRef.current.publishEvent('columnOrderChange', columnOrderChangeParams);\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'columnOrderChange', props.onColumnOrderChange);\n};","map":{"version":3,"names":["_extends","React","unstable_composeClasses","composeClasses","useTheme","useGridApiEventHandler","getDataGridUtilityClass","useGridLogger","useGridApiOptionHandler","gridColumnReorderDragColSelector","CURSOR_MOVE_DIRECTION_LEFT","CURSOR_MOVE_DIRECTION_RIGHT","getCursorMoveDirectionX","currentCoordinates","nextCoordinates","x","hasCursorPositionChanged","y","useUtilityClasses","ownerState","classes","slots","columnHeaderDragging","columnReorderStateInitializer","state","columnReorder","dragCol","useGridColumnReorder","apiRef","props","logger","dragColNode","useRef","cursorPosition","originColumnIndex","forbiddenIndexes","removeDnDStylesTimeout","theme","useEffect","clearTimeout","current","handleDragStart","useCallback","params","event","disableColumnReorder","colDef","disableReorder","debug","field","stopPropagation","currentTarget","classList","add","dataTransfer","effectAllowed","setState","forceUpdate","setTimeout","remove","getColumnIndex","draggingColumnGroupPath","unstable_getColumnGroupPath","columnIndex","allColumns","getAllColumns","groupsLookup","unstable_getAllGroupDetails","getGroupPathFromColumnIndex","colIndex","limitingGroupId","forEach","groupId","_groupsLookup$groupId","freeReordering","includes","length","indexToForbid","leftIndex","rightIndex","allowIndex","_groupsLookup$groupId2","handleDragEnter","preventDefault","handleDragOver","dragColField","coordinates","clientX","clientY","targetColIndex","targetColVisibleIndex","targetCol","getColumn","dragColIndex","visibleColumns","getVisibleColumns","cursorMoveDirectionX","hasMovedLeft","direction","hasMovedRight","canBeReordered","indexOffsetInHiddenColumns","nextVisibleColumnField","indexWithOffset","canBeReorderedProcessed","unstable_applyPipeProcessors","targetIndex","setColumnIndex","handleDragEnd","dropEffect","keepColumnPositionIfDraggedOutside","columnOrderChangeParams","column","getColumnIndexRelativeToVisibleColumns","oldIndex","publishEvent","onColumnOrderChange"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/useGridColumnReorder.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n\n/**\n * @requires useGridColumns (method)\n */\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const theme = useTheme();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n    logger.debug(`Start dragging col ${params.field}`);\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    if (event.dataTransfer) {\n      event.dataTransfer.effectAllowed = 'move';\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.unstable_getAllGroupDetails();\n    const getGroupPathFromColumnIndex = colIndex => {\n      const field = allColumns[colIndex].field;\n      return apiRef.current.unstable_getColumnGroupPath(field);\n    };\n\n    // The limitingGroupId is the id of the group from which the dragged column should not escape\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      var _groupsLookup$groupId;\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && getGroupPathFromColumnIndex(columnIndex - 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && getGroupPathFromColumnIndex(columnIndex + 1).includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n      if (limitingGroupId !== null) {\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n        if (leftIndex >= 0 && getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      }\n\n      // Verify we are not splitting another group\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        getGroupPathFromColumnIndex(rightIndex).forEach(groupId => {\n          if (getGroupPathFromColumnIndex(leftIndex).includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2;\n              // moving here split the group groupId in two distincts chunks\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (!dragColField) {\n      return;\n    }\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && (theme.direction === 'rtl' ? dragColIndex < targetColIndex : targetColIndex < dragColIndex);\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && (theme.direction === 'rtl' ? targetColIndex < dragColIndex : dragColIndex < targetColIndex);\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger, theme.direction]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n    logger.debug('End dragging col');\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null;\n\n    // Check if the column was dropped outside the grid.\n    if (event.dataTransfer.dropEffect === 'none' && !props.keepColumnPositionIfDraggedOutside) {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    } else {\n      // Emit the columnOrderChange event only once when the reordering stops.\n      const columnOrderChangeParams = {\n        column: apiRef.current.getColumn(dragColField),\n        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(dragColField),\n        oldIndex: originColumnIndex.current\n      };\n      apiRef.current.publishEvent('columnOrderChange', columnOrderChangeParams);\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'columnOrderChange', props.onColumnOrderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}