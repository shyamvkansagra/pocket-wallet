{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { insertNodeInTree } from '../../../utils/tree/utils';\nexport function addPinnedRow({\n  groupingParams,\n  rowModel,\n  rowId,\n  position,\n  apiRef,\n  isAutoGenerated\n}) {\n  var _groupingParams$addit, _groupingParams$addit2;\n  const dataRowIdToModelLookup = _extends({}, groupingParams.dataRowIdToModelLookup);\n  const dataRowIdToIdLookup = _extends({}, groupingParams.dataRowIdToIdLookup);\n  const tree = _extends({}, groupingParams.tree);\n  const treeDepths = _extends({}, groupingParams.treeDepths);\n\n  // TODO: warn if id is already present in `props.rows`\n\n  const node = {\n    type: 'pinnedRow',\n    id: rowId,\n    depth: 0,\n    parent: GRID_ROOT_GROUP_ID,\n    isAutoGenerated\n  };\n  insertNodeInTree(node, tree, treeDepths, null);\n  if (!isAutoGenerated) {\n    dataRowIdToModelLookup[rowId] = rowModel;\n    dataRowIdToIdLookup[rowId] = rowId;\n  }\n  // Do not push it to ids list so that pagination is not affected by pinned rows\n\n  apiRef.current.caches.rows.dataRowIdToModelLookup[rowId] = _extends({}, rowModel);\n  apiRef.current.caches.rows.dataRowIdToIdLookup[rowId] = rowId;\n  const previousPinnedRows = ((_groupingParams$addit = groupingParams.additionalRowGroups) == null ? void 0 : _groupingParams$addit.pinnedRows) || {};\n  const newPinnedRow = {\n    id: rowId,\n    model: rowModel\n  };\n  if ((_groupingParams$addit2 = groupingParams.additionalRowGroups) != null && (_groupingParams$addit2 = _groupingParams$addit2.pinnedRows) != null && (_groupingParams$addit2 = _groupingParams$addit2[position]) != null && _groupingParams$addit2.includes(newPinnedRow)) {\n    return _extends({}, groupingParams, {\n      dataRowIdToModelLookup,\n      dataRowIdToIdLookup,\n      tree,\n      treeDepths\n    });\n  }\n  return _extends({}, groupingParams, {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    tree,\n    treeDepths,\n    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n      pinnedRows: _extends({}, previousPinnedRows, {\n        [position]: [...(previousPinnedRows[position] || []), newPinnedRow]\n      })\n    })\n  });\n}\nexport const useGridRowPinningPreProcessors = apiRef => {\n  const addPinnedRows = React.useCallback(groupingParams => {\n    var _pinnedRowsCache$topI, _pinnedRowsCache$bott, _pinnedRowsCache$bott2, _pinnedRowsCache$topI2;\n    const pinnedRowsCache = apiRef.current.caches.pinnedRows || {};\n    let newGroupingParams = _extends({}, groupingParams, {\n      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n        // reset pinned rows state\n        pinnedRows: {}\n      })\n    });\n    (_pinnedRowsCache$topI = pinnedRowsCache.topIds) == null ? void 0 : _pinnedRowsCache$topI.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'top',\n        apiRef,\n        isAutoGenerated: false\n      });\n    });\n    (_pinnedRowsCache$bott = pinnedRowsCache.bottomIds) == null ? void 0 : _pinnedRowsCache$bott.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'bottom',\n        apiRef,\n        isAutoGenerated: false\n      });\n    });\n\n    // If row with the same `id` is present both in `rows` and `pinnedRows` - remove it from the root group children\n    if ((_pinnedRowsCache$bott2 = pinnedRowsCache.bottomIds) != null && _pinnedRowsCache$bott2.length || (_pinnedRowsCache$topI2 = pinnedRowsCache.topIds) != null && _pinnedRowsCache$topI2.length) {\n      const shouldKeepRow = rowId => {\n        if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].type === 'pinnedRow') {\n          return false;\n        }\n        return true;\n      };\n      const rootGroupNode = newGroupingParams.tree[GRID_ROOT_GROUP_ID];\n      newGroupingParams.tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroupNode, {\n        children: rootGroupNode.children.filter(shouldKeepRow)\n      });\n      newGroupingParams.dataRowIds = newGroupingParams.dataRowIds.filter(shouldKeepRow);\n    }\n    return newGroupingParams;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);\n};","map":{"version":3,"names":["_extends","React","useGridRegisterPipeProcessor","GRID_ROOT_GROUP_ID","insertNodeInTree","addPinnedRow","groupingParams","rowModel","rowId","position","apiRef","isAutoGenerated","_groupingParams$addit","_groupingParams$addit2","dataRowIdToModelLookup","dataRowIdToIdLookup","tree","treeDepths","node","type","id","depth","parent","current","caches","rows","previousPinnedRows","additionalRowGroups","pinnedRows","newPinnedRow","model","includes","useGridRowPinningPreProcessors","addPinnedRows","useCallback","_pinnedRowsCache$topI","_pinnedRowsCache$bott","_pinnedRowsCache$bott2","_pinnedRowsCache$topI2","pinnedRowsCache","newGroupingParams","topIds","forEach","idLookup","bottomIds","length","shouldKeepRow","rootGroupNode","children","filter","dataRowIds"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/useGridRowPinningPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { insertNodeInTree } from '../../../utils/tree/utils';\nexport function addPinnedRow({\n  groupingParams,\n  rowModel,\n  rowId,\n  position,\n  apiRef,\n  isAutoGenerated\n}) {\n  var _groupingParams$addit, _groupingParams$addit2;\n  const dataRowIdToModelLookup = _extends({}, groupingParams.dataRowIdToModelLookup);\n  const dataRowIdToIdLookup = _extends({}, groupingParams.dataRowIdToIdLookup);\n  const tree = _extends({}, groupingParams.tree);\n  const treeDepths = _extends({}, groupingParams.treeDepths);\n\n  // TODO: warn if id is already present in `props.rows`\n\n  const node = {\n    type: 'pinnedRow',\n    id: rowId,\n    depth: 0,\n    parent: GRID_ROOT_GROUP_ID,\n    isAutoGenerated\n  };\n  insertNodeInTree(node, tree, treeDepths, null);\n  if (!isAutoGenerated) {\n    dataRowIdToModelLookup[rowId] = rowModel;\n    dataRowIdToIdLookup[rowId] = rowId;\n  }\n  // Do not push it to ids list so that pagination is not affected by pinned rows\n\n  apiRef.current.caches.rows.dataRowIdToModelLookup[rowId] = _extends({}, rowModel);\n  apiRef.current.caches.rows.dataRowIdToIdLookup[rowId] = rowId;\n  const previousPinnedRows = ((_groupingParams$addit = groupingParams.additionalRowGroups) == null ? void 0 : _groupingParams$addit.pinnedRows) || {};\n  const newPinnedRow = {\n    id: rowId,\n    model: rowModel\n  };\n  if ((_groupingParams$addit2 = groupingParams.additionalRowGroups) != null && (_groupingParams$addit2 = _groupingParams$addit2.pinnedRows) != null && (_groupingParams$addit2 = _groupingParams$addit2[position]) != null && _groupingParams$addit2.includes(newPinnedRow)) {\n    return _extends({}, groupingParams, {\n      dataRowIdToModelLookup,\n      dataRowIdToIdLookup,\n      tree,\n      treeDepths\n    });\n  }\n  return _extends({}, groupingParams, {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    tree,\n    treeDepths,\n    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n      pinnedRows: _extends({}, previousPinnedRows, {\n        [position]: [...(previousPinnedRows[position] || []), newPinnedRow]\n      })\n    })\n  });\n}\nexport const useGridRowPinningPreProcessors = apiRef => {\n  const addPinnedRows = React.useCallback(groupingParams => {\n    var _pinnedRowsCache$topI, _pinnedRowsCache$bott, _pinnedRowsCache$bott2, _pinnedRowsCache$topI2;\n    const pinnedRowsCache = apiRef.current.caches.pinnedRows || {};\n    let newGroupingParams = _extends({}, groupingParams, {\n      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n        // reset pinned rows state\n        pinnedRows: {}\n      })\n    });\n    (_pinnedRowsCache$topI = pinnedRowsCache.topIds) == null ? void 0 : _pinnedRowsCache$topI.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'top',\n        apiRef,\n        isAutoGenerated: false\n      });\n    });\n    (_pinnedRowsCache$bott = pinnedRowsCache.bottomIds) == null ? void 0 : _pinnedRowsCache$bott.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'bottom',\n        apiRef,\n        isAutoGenerated: false\n      });\n    });\n\n    // If row with the same `id` is present both in `rows` and `pinnedRows` - remove it from the root group children\n    if ((_pinnedRowsCache$bott2 = pinnedRowsCache.bottomIds) != null && _pinnedRowsCache$bott2.length || (_pinnedRowsCache$topI2 = pinnedRowsCache.topIds) != null && _pinnedRowsCache$topI2.length) {\n      const shouldKeepRow = rowId => {\n        if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].type === 'pinnedRow') {\n          return false;\n        }\n        return true;\n      };\n      const rootGroupNode = newGroupingParams.tree[GRID_ROOT_GROUP_ID];\n      newGroupingParams.tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroupNode, {\n        children: rootGroupNode.children.filter(shouldKeepRow)\n      });\n      newGroupingParams.dataRowIds = newGroupingParams.dataRowIds.filter(shouldKeepRow);\n    }\n    return newGroupingParams;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,4BAA4B,QAAQ,4BAA4B;AACzE,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAO,SAASC,YAAYA,CAAC;EAC3BC,cAAc;EACdC,QAAQ;EACRC,KAAK;EACLC,QAAQ;EACRC,MAAM;EACNC;AACF,CAAC,EAAE;EACD,IAAIC,qBAAqB,EAAEC,sBAAsB;EACjD,MAAMC,sBAAsB,GAAGd,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACQ,sBAAsB,CAAC;EAClF,MAAMC,mBAAmB,GAAGf,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACS,mBAAmB,CAAC;EAC5E,MAAMC,IAAI,GAAGhB,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACU,IAAI,CAAC;EAC9C,MAAMC,UAAU,GAAGjB,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACW,UAAU,CAAC;;EAE1D;;EAEA,MAAMC,IAAI,GAAG;IACXC,IAAI,EAAE,WAAW;IACjBC,EAAE,EAAEZ,KAAK;IACTa,KAAK,EAAE,CAAC;IACRC,MAAM,EAAEnB,kBAAkB;IAC1BQ;EACF,CAAC;EACDP,gBAAgB,CAACc,IAAI,EAAEF,IAAI,EAAEC,UAAU,EAAE,IAAI,CAAC;EAC9C,IAAI,CAACN,eAAe,EAAE;IACpBG,sBAAsB,CAACN,KAAK,CAAC,GAAGD,QAAQ;IACxCQ,mBAAmB,CAACP,KAAK,CAAC,GAAGA,KAAK;EACpC;EACA;;EAEAE,MAAM,CAACa,OAAO,CAACC,MAAM,CAACC,IAAI,CAACX,sBAAsB,CAACN,KAAK,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,EAAEO,QAAQ,CAAC;EACjFG,MAAM,CAACa,OAAO,CAACC,MAAM,CAACC,IAAI,CAACV,mBAAmB,CAACP,KAAK,CAAC,GAAGA,KAAK;EAC7D,MAAMkB,kBAAkB,GAAG,CAAC,CAACd,qBAAqB,GAAGN,cAAc,CAACqB,mBAAmB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGf,qBAAqB,CAACgB,UAAU,KAAK,CAAC,CAAC;EACnJ,MAAMC,YAAY,GAAG;IACnBT,EAAE,EAAEZ,KAAK;IACTsB,KAAK,EAAEvB;EACT,CAAC;EACD,IAAI,CAACM,sBAAsB,GAAGP,cAAc,CAACqB,mBAAmB,KAAK,IAAI,IAAI,CAACd,sBAAsB,GAAGA,sBAAsB,CAACe,UAAU,KAAK,IAAI,IAAI,CAACf,sBAAsB,GAAGA,sBAAsB,CAACJ,QAAQ,CAAC,KAAK,IAAI,IAAII,sBAAsB,CAACkB,QAAQ,CAACF,YAAY,CAAC,EAAE;IACzQ,OAAO7B,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,EAAE;MAClCQ,sBAAsB;MACtBC,mBAAmB;MACnBC,IAAI;MACJC;IACF,CAAC,CAAC;EACJ;EACA,OAAOjB,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,EAAE;IAClCQ,sBAAsB;IACtBC,mBAAmB;IACnBC,IAAI;IACJC,UAAU;IACVU,mBAAmB,EAAE3B,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACqB,mBAAmB,EAAE;MACpEC,UAAU,EAAE5B,QAAQ,CAAC,CAAC,CAAC,EAAE0B,kBAAkB,EAAE;QAC3C,CAACjB,QAAQ,GAAG,CAAC,IAAIiB,kBAAkB,CAACjB,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAEoB,YAAY;MACpE,CAAC;IACH,CAAC;EACH,CAAC,CAAC;AACJ;AACA,OAAO,MAAMG,8BAA8B,GAAGtB,MAAM,IAAI;EACtD,MAAMuB,aAAa,GAAGhC,KAAK,CAACiC,WAAW,CAAC5B,cAAc,IAAI;IACxD,IAAI6B,qBAAqB,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,sBAAsB;IAChG,MAAMC,eAAe,GAAG7B,MAAM,CAACa,OAAO,CAACC,MAAM,CAACI,UAAU,IAAI,CAAC,CAAC;IAC9D,IAAIY,iBAAiB,GAAGxC,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,EAAE;MACnDqB,mBAAmB,EAAE3B,QAAQ,CAAC,CAAC,CAAC,EAAEM,cAAc,CAACqB,mBAAmB,EAAE;QACpE;QACAC,UAAU,EAAE,CAAC;MACf,CAAC;IACH,CAAC,CAAC;IACF,CAACO,qBAAqB,GAAGI,eAAe,CAACE,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGN,qBAAqB,CAACO,OAAO,CAAClC,KAAK,IAAI;MACzGgC,iBAAiB,GAAGnC,YAAY,CAAC;QAC/BC,cAAc,EAAEkC,iBAAiB;QACjCjC,QAAQ,EAAEgC,eAAe,CAACI,QAAQ,CAACnC,KAAK,CAAC;QACzCA,KAAK;QACLC,QAAQ,EAAE,KAAK;QACfC,MAAM;QACNC,eAAe,EAAE;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,CAACyB,qBAAqB,GAAGG,eAAe,CAACK,SAAS,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGR,qBAAqB,CAACM,OAAO,CAAClC,KAAK,IAAI;MAC5GgC,iBAAiB,GAAGnC,YAAY,CAAC;QAC/BC,cAAc,EAAEkC,iBAAiB;QACjCjC,QAAQ,EAAEgC,eAAe,CAACI,QAAQ,CAACnC,KAAK,CAAC;QACzCA,KAAK;QACLC,QAAQ,EAAE,QAAQ;QAClBC,MAAM;QACNC,eAAe,EAAE;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC0B,sBAAsB,GAAGE,eAAe,CAACK,SAAS,KAAK,IAAI,IAAIP,sBAAsB,CAACQ,MAAM,IAAI,CAACP,sBAAsB,GAAGC,eAAe,CAACE,MAAM,KAAK,IAAI,IAAIH,sBAAsB,CAACO,MAAM,EAAE;MAC/L,MAAMC,aAAa,GAAGtC,KAAK,IAAI;QAC7B,IAAIgC,iBAAiB,CAACxB,IAAI,CAACR,KAAK,CAAC,IAAIgC,iBAAiB,CAACxB,IAAI,CAACR,KAAK,CAAC,CAACW,IAAI,KAAK,WAAW,EAAE;UACvF,OAAO,KAAK;QACd;QACA,OAAO,IAAI;MACb,CAAC;MACD,MAAM4B,aAAa,GAAGP,iBAAiB,CAACxB,IAAI,CAACb,kBAAkB,CAAC;MAChEqC,iBAAiB,CAACxB,IAAI,CAACb,kBAAkB,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,EAAE+C,aAAa,EAAE;QACvEC,QAAQ,EAAED,aAAa,CAACC,QAAQ,CAACC,MAAM,CAACH,aAAa;MACvD,CAAC,CAAC;MACFN,iBAAiB,CAACU,UAAU,GAAGV,iBAAiB,CAACU,UAAU,CAACD,MAAM,CAACH,aAAa,CAAC;IACnF;IACA,OAAON,iBAAiB;EAC1B,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;EACZR,4BAA4B,CAACQ,MAAM,EAAE,aAAa,EAAEuB,aAAa,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}