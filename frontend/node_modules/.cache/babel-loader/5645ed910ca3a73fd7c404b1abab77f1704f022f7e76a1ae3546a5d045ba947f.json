{"ast":null,"code":"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RatingValue = /*#__PURE__*/React.memo(function RatingValue(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      lineHeight: '24px',\n      color: 'text.secondary'\n    },\n    children: [/*#__PURE__*/_jsx(Rating, {\n      value: value,\n      sx: {\n        mr: 1\n      },\n      readOnly: true\n    }), \" \", Math.round(Number(value) * 10) / 10]\n  });\n});\nexport function renderRating(params) {\n  if (params.value == null) {\n    return '';\n  }\n\n  // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(RatingValue, {\n    value: params.value\n  });\n}","map":{"version":3,"names":["React","Box","Rating","jsx","_jsx","jsxs","_jsxs","RatingValue","memo","props","value","sx","display","alignItems","lineHeight","color","children","mr","readOnly","Math","round","Number","renderRating","params","aggregation","hasCellUnit"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-generator/renderer/renderRating.js"],"sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RatingValue = /*#__PURE__*/React.memo(function RatingValue(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      lineHeight: '24px',\n      color: 'text.secondary'\n    },\n    children: [/*#__PURE__*/_jsx(Rating, {\n      value: value,\n      sx: {\n        mr: 1\n      },\n      readOnly: true\n    }), \" \", Math.round(Number(value) * 10) / 10]\n  });\n});\nexport function renderRating(params) {\n  if (params.value == null) {\n    return '';\n  }\n\n  // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(RatingValue, {\n    value: params.value\n  });\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AACjD,MAAMC,WAAW,GAAG,aAAaP,KAAK,CAACQ,IAAI,CAAC,SAASD,WAAWA,CAACE,KAAK,EAAE;EACtE,MAAM;IACJC;EACF,CAAC,GAAGD,KAAK;EACT,OAAO,aAAaH,KAAK,CAACL,GAAG,EAAE;IAC7BU,EAAE,EAAE;MACFC,OAAO,EAAE,MAAM;MACfC,UAAU,EAAE,QAAQ;MACpBC,UAAU,EAAE,MAAM;MAClBC,KAAK,EAAE;IACT,CAAC;IACDC,QAAQ,EAAE,CAAC,aAAaZ,IAAI,CAACF,MAAM,EAAE;MACnCQ,KAAK,EAAEA,KAAK;MACZC,EAAE,EAAE;QACFM,EAAE,EAAE;MACN,CAAC;MACDC,QAAQ,EAAE;IACZ,CAAC,CAAC,EAAE,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACX,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,OAAO,SAASY,YAAYA,CAACC,MAAM,EAAE;EACnC,IAAIA,MAAM,CAACb,KAAK,IAAI,IAAI,EAAE;IACxB,OAAO,EAAE;EACX;;EAEA;EACA;EACA,IAAIa,MAAM,CAACC,WAAW,IAAI,CAACD,MAAM,CAACC,WAAW,CAACC,WAAW,EAAE;IACzD,OAAO,IAAI;EACb;EACA,OAAO,aAAarB,IAAI,CAACG,WAAW,EAAE;IACpCG,KAAK,EAAEa,MAAM,CAACb;EAChB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}