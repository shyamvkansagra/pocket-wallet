{"ast":null,"code":"import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\n// Single-linked list node\nclass Node {\n  constructor(data, next) {\n    this.next = void 0;\n    this.data = void 0;\n    this.next = next;\n    this.data = data;\n  }\n  insertAfter(list) {\n    if (!list.first || !list.last) {\n      return;\n    }\n    const next = this.next;\n    this.next = list.first;\n    list.last.next = next;\n  }\n}\n\n// Single-linked list container\nclass List {\n  constructor(first, last) {\n    this.first = void 0;\n    this.last = void 0;\n    this.first = first;\n    this.last = last;\n  }\n  data() {\n    const array = [];\n    this.forEach(node => {\n      array.push(node.data);\n    });\n    return array;\n  }\n  forEach(fn) {\n    let current = this.first;\n    while (current !== null) {\n      fn(current);\n      current = current.next;\n    }\n  }\n  static from(array) {\n    if (array.length === 0) {\n      return new List(null, null);\n    }\n    let index = 0;\n    const first = new Node(array[index], null);\n    let current = first;\n    while (index + 1 < array.length) {\n      index += 1;\n      const node = new Node(array[index], null);\n      current.next = node;\n      current = node;\n    }\n    return new List(first, current);\n  }\n}\nexport const sortRowTree = params => {\n  const {\n    rowTree,\n    disableChildrenSorting,\n    sortRowList,\n    shouldRenderGroupBelowLeaves\n  } = params;\n  const sortedGroupedByParentRows = new Map();\n  const sortGroup = node => {\n    const shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);\n    let sortedRowIds;\n    if (shouldSortGroup) {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = sortRowList(node.children.map(childId => rowTree[childId]));\n    } else if (shouldRenderGroupBelowLeaves) {\n      const childrenLeaves = [];\n      const childrenGroups = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childId = node.children[i];\n        const childNode = rowTree[childId];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n          childrenGroups.push(childId);\n        } else if (childNode.type === 'leaf') {\n          childrenLeaves.push(childId);\n        }\n      }\n      sortedRowIds = [...childrenLeaves, ...childrenGroups];\n    } else {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = [...node.children];\n    }\n    if (node.footerId != null) {\n      sortedRowIds.push(node.footerId);\n    }\n    sortedGroupedByParentRows.set(node.id, sortedRowIds);\n  };\n  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);\n  const rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));\n  rootList.forEach(node => {\n    const children = sortedGroupedByParentRows.get(node.data);\n    if (children != null && children.length) {\n      node.insertAfter(List.from(children));\n    }\n  });\n  return rootList.data();\n};","map":{"version":3,"names":["GRID_ROOT_GROUP_ID","Node","constructor","data","next","insertAfter","list","first","last","List","array","forEach","node","push","fn","current","from","length","index","sortRowTree","params","rowTree","disableChildrenSorting","sortRowList","shouldRenderGroupBelowLeaves","sortedGroupedByParentRows","Map","sortGroup","shouldSortGroup","depth","sortedRowIds","i","children","childNode","type","map","childId","childrenLeaves","childrenGroups","footerId","set","id","rootList","get"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/utils/tree/sortRowTree.js"],"sourcesContent":["import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\n// Single-linked list node\nclass Node {\n  constructor(data, next) {\n    this.next = void 0;\n    this.data = void 0;\n    this.next = next;\n    this.data = data;\n  }\n  insertAfter(list) {\n    if (!list.first || !list.last) {\n      return;\n    }\n    const next = this.next;\n    this.next = list.first;\n    list.last.next = next;\n  }\n}\n\n// Single-linked list container\nclass List {\n  constructor(first, last) {\n    this.first = void 0;\n    this.last = void 0;\n    this.first = first;\n    this.last = last;\n  }\n  data() {\n    const array = [];\n    this.forEach(node => {\n      array.push(node.data);\n    });\n    return array;\n  }\n  forEach(fn) {\n    let current = this.first;\n    while (current !== null) {\n      fn(current);\n      current = current.next;\n    }\n  }\n  static from(array) {\n    if (array.length === 0) {\n      return new List(null, null);\n    }\n    let index = 0;\n    const first = new Node(array[index], null);\n    let current = first;\n    while (index + 1 < array.length) {\n      index += 1;\n      const node = new Node(array[index], null);\n      current.next = node;\n      current = node;\n    }\n    return new List(first, current);\n  }\n}\nexport const sortRowTree = params => {\n  const {\n    rowTree,\n    disableChildrenSorting,\n    sortRowList,\n    shouldRenderGroupBelowLeaves\n  } = params;\n  const sortedGroupedByParentRows = new Map();\n  const sortGroup = node => {\n    const shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);\n    let sortedRowIds;\n    if (shouldSortGroup) {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = sortRowList(node.children.map(childId => rowTree[childId]));\n    } else if (shouldRenderGroupBelowLeaves) {\n      const childrenLeaves = [];\n      const childrenGroups = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childId = node.children[i];\n        const childNode = rowTree[childId];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n          childrenGroups.push(childId);\n        } else if (childNode.type === 'leaf') {\n          childrenLeaves.push(childId);\n        }\n      }\n      sortedRowIds = [...childrenLeaves, ...childrenGroups];\n    } else {\n      for (let i = 0; i < node.children.length; i += 1) {\n        const childNode = rowTree[node.children[i]];\n        if (childNode.type === 'group') {\n          sortGroup(childNode);\n        }\n      }\n      sortedRowIds = [...node.children];\n    }\n    if (node.footerId != null) {\n      sortedRowIds.push(node.footerId);\n    }\n    sortedGroupedByParentRows.set(node.id, sortedRowIds);\n  };\n  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);\n  const rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));\n  rootList.forEach(node => {\n    const children = sortedGroupedByParentRows.get(node.data);\n    if (children != null && children.length) {\n      node.insertAfter(List.from(children));\n    }\n  });\n  return rootList.data();\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}