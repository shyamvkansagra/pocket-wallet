{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { isDeepEqual, getTreeNodeDescendants } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\nimport { removeDataRowFromTree } from './removeDataRowFromTree';\nimport { createUpdatedGroupsManager, getNodePathInTree } from './utils';\nexport const updateRowTree = params => {\n  const tree = _extends({}, params.previousTree);\n  const treeDepths = _extends({}, params.previousTreeDepth);\n  const updatedGroupsManager = createUpdatedGroupsManager();\n  for (let i = 0; i < params.nodes.inserted.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.inserted[i];\n    insertDataRowInTree({\n      previousTree: params.previousTree,\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id,\n      path,\n      onDuplicatePath: params.onDuplicatePath,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  for (let i = 0; i < params.nodes.removed.length; i += 1) {\n    const nodeId = params.nodes.removed[i];\n    removeDataRowFromTree({\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id: nodeId\n    });\n  }\n  for (let i = 0; i < params.nodes.modified.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.modified[i];\n    const pathInPreviousTree = getNodePathInTree({\n      tree,\n      id\n    });\n    const isInSameGroup = isDeepEqual(pathInPreviousTree, path);\n    if (!isInSameGroup) {\n      removeDataRowFromTree({\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id\n      });\n      insertDataRowInTree({\n        previousTree: params.previousTree,\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id,\n        path,\n        onDuplicatePath: params.onDuplicatePath,\n        isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n        defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n      });\n    } else {\n      updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(tree[id].parent, 'modifyChildren');\n    }\n  }\n\n  // TODO rows v6: Avoid walking the whole tree, we should be able to generate the new list only using slices.\n  const dataRowIds = getTreeNodeDescendants(tree, GRID_ROOT_GROUP_ID, true);\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds,\n    updatedGroupsManager\n  };\n};","map":{"version":3,"names":["_extends","GRID_ROOT_GROUP_ID","isDeepEqual","getTreeNodeDescendants","insertDataRowInTree","removeDataRowFromTree","createUpdatedGroupsManager","getNodePathInTree","updateRowTree","params","tree","previousTree","treeDepths","previousTreeDepth","updatedGroupsManager","i","nodes","inserted","length","id","path","onDuplicatePath","isGroupExpandedByDefault","defaultGroupingExpansionDepth","removed","nodeId","modified","pathInPreviousTree","isInSameGroup","addAction","parent","dataRowIds","groupingName"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/utils/tree/updateRowTree.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { isDeepEqual, getTreeNodeDescendants } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\nimport { removeDataRowFromTree } from './removeDataRowFromTree';\nimport { createUpdatedGroupsManager, getNodePathInTree } from './utils';\nexport const updateRowTree = params => {\n  const tree = _extends({}, params.previousTree);\n  const treeDepths = _extends({}, params.previousTreeDepth);\n  const updatedGroupsManager = createUpdatedGroupsManager();\n  for (let i = 0; i < params.nodes.inserted.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.inserted[i];\n    insertDataRowInTree({\n      previousTree: params.previousTree,\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id,\n      path,\n      onDuplicatePath: params.onDuplicatePath,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  for (let i = 0; i < params.nodes.removed.length; i += 1) {\n    const nodeId = params.nodes.removed[i];\n    removeDataRowFromTree({\n      tree,\n      treeDepths,\n      updatedGroupsManager,\n      id: nodeId\n    });\n  }\n  for (let i = 0; i < params.nodes.modified.length; i += 1) {\n    const {\n      id,\n      path\n    } = params.nodes.modified[i];\n    const pathInPreviousTree = getNodePathInTree({\n      tree,\n      id\n    });\n    const isInSameGroup = isDeepEqual(pathInPreviousTree, path);\n    if (!isInSameGroup) {\n      removeDataRowFromTree({\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id\n      });\n      insertDataRowInTree({\n        previousTree: params.previousTree,\n        tree,\n        treeDepths,\n        updatedGroupsManager,\n        id,\n        path,\n        onDuplicatePath: params.onDuplicatePath,\n        isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n        defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n      });\n    } else {\n      updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(tree[id].parent, 'modifyChildren');\n    }\n  }\n\n  // TODO rows v6: Avoid walking the whole tree, we should be able to generate the new list only using slices.\n  const dataRowIds = getTreeNodeDescendants(tree, GRID_ROOT_GROUP_ID, true);\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds,\n    updatedGroupsManager\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}