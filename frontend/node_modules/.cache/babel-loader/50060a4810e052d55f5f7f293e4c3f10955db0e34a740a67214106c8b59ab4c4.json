{"ast":null,"code":"export const currencyPairs = ['USDGBP', 'USDEUR', 'GBPEUR', 'JPYUSD', 'MXNUSD', 'BTCUSD', 'USDCAD', 'EURJPY', 'EURUSD', 'EURCHF', 'USDCHF', 'EURGBP', 'GBPUSD', 'AUDCAD', 'NZDUSD', 'GBPCHF', 'AUDUSD', 'GBPJPY', 'USDJPY', 'CHFJPY', 'EURCAD', 'AUDJPY', 'EURAUD', 'AUDNZD', 'CADEUR', 'CHFMXN', 'ETHUSD', 'BCHUSD', 'ETHBTC', 'XRPUSD', 'XRPBTC', 'USDLTC', 'USDXRP', 'USDDSH', 'USDBCH', 'JPYEUR', 'JPYUSD', 'JPYGBP', 'JPYCAD', 'JPYCHF', 'JPYAUD', 'JPYNZD', 'JPYSGD', 'JPYNOK', 'JPYRUB', 'JPYSEK', 'JPYTRY', 'JPYZAR', 'JPYHKD', 'JPYCNH', 'JPYDKK', 'JPYMXN', 'JPYPLN', 'JPYXAG', 'JPYXAU', 'JPYBTC', 'JPYETH', 'JPYLTC', 'JPYXRP', 'JPYDSH', 'JPYBCH', 'GBPEUR', 'GBPRUB', 'GBPTRY'];\nexport const getBasicGridData = (rowLength, colLength) => {\n  const data = [];\n  const pricesColLength = colLength - 2;\n  for (let i = 0; i < rowLength; i += 1) {\n    const idx = i >= currencyPairs.length ? i % currencyPairs.length : i;\n    const model = {\n      id: i,\n      currencyPair: currencyPairs[idx]\n    };\n    for (let j = 1; j <= pricesColLength; j += 1) {\n      model[`price${j}M`] = Number(`${i.toString()}${j}`); // randomPrice(0.7, 2);\n    }\n\n    data.push(model);\n  }\n  const columns = [{\n    field: 'id',\n    headerName: 'id',\n    type: 'number'\n  }, {\n    field: 'currencyPair',\n    headerName: 'Currency Pair'\n  }];\n  for (let j = 1; j <= pricesColLength; j += 1) {\n    // const y = Math.floor(j / 12);\n    columns.push({\n      field: `price${j}M`,\n      headerName: `${j}M`,\n      type: 'number'\n    }); // (y > 0 ? `${y}Y` : '') + `${j - y * 12}M`\n  }\n\n  columns.length = colLength; // we cut the array in case < 2;\n  return {\n    columns,\n    rows: data\n  };\n};","map":{"version":3,"names":["currencyPairs","getBasicGridData","rowLength","colLength","data","pricesColLength","i","idx","length","model","id","currencyPair","j","Number","toString","push","columns","field","headerName","type","rows"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-generator/services/basic-data-service.js"],"sourcesContent":["export const currencyPairs = ['USDGBP', 'USDEUR', 'GBPEUR', 'JPYUSD', 'MXNUSD', 'BTCUSD', 'USDCAD', 'EURJPY', 'EURUSD', 'EURCHF', 'USDCHF', 'EURGBP', 'GBPUSD', 'AUDCAD', 'NZDUSD', 'GBPCHF', 'AUDUSD', 'GBPJPY', 'USDJPY', 'CHFJPY', 'EURCAD', 'AUDJPY', 'EURAUD', 'AUDNZD', 'CADEUR', 'CHFMXN', 'ETHUSD', 'BCHUSD', 'ETHBTC', 'XRPUSD', 'XRPBTC', 'USDLTC', 'USDXRP', 'USDDSH', 'USDBCH', 'JPYEUR', 'JPYUSD', 'JPYGBP', 'JPYCAD', 'JPYCHF', 'JPYAUD', 'JPYNZD', 'JPYSGD', 'JPYNOK', 'JPYRUB', 'JPYSEK', 'JPYTRY', 'JPYZAR', 'JPYHKD', 'JPYCNH', 'JPYDKK', 'JPYMXN', 'JPYPLN', 'JPYXAG', 'JPYXAU', 'JPYBTC', 'JPYETH', 'JPYLTC', 'JPYXRP', 'JPYDSH', 'JPYBCH', 'GBPEUR', 'GBPRUB', 'GBPTRY'];\nexport const getBasicGridData = (rowLength, colLength) => {\n  const data = [];\n  const pricesColLength = colLength - 2;\n  for (let i = 0; i < rowLength; i += 1) {\n    const idx = i >= currencyPairs.length ? i % currencyPairs.length : i;\n    const model = {\n      id: i,\n      currencyPair: currencyPairs[idx]\n    };\n    for (let j = 1; j <= pricesColLength; j += 1) {\n      model[`price${j}M`] = Number(`${i.toString()}${j}`); // randomPrice(0.7, 2);\n    }\n\n    data.push(model);\n  }\n  const columns = [{\n    field: 'id',\n    headerName: 'id',\n    type: 'number'\n  }, {\n    field: 'currencyPair',\n    headerName: 'Currency Pair'\n  }];\n  for (let j = 1; j <= pricesColLength; j += 1) {\n    // const y = Math.floor(j / 12);\n    columns.push({\n      field: `price${j}M`,\n      headerName: `${j}M`,\n      type: 'number'\n    }); // (y > 0 ? `${y}Y` : '') + `${j - y * 12}M`\n  }\n\n  columns.length = colLength; // we cut the array in case < 2;\n  return {\n    columns,\n    rows: data\n  };\n};"],"mappings":"AAAA,OAAO,MAAMA,aAAapB,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;EACxD,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,eAAe,GAAGF,SAAS,GAAG,CAAC;EACrC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,EAAEI,CAAC,IAAI,CAAC,EAAE;IACrC,MAAMC,GAAG,GAAGD,CAAC,IAAIN,aAAa,CAACQ,MAAM,GAAGF,CAAC,GAAGN,aAAa,CAACQ,MAAM,GAAGF,CAAC;IACpE,MAAMG,KAAK,GAAG;MACZC,EAAE,EAAEJ,CAAC;MACLK,YAAY,EAAEX,aAAa,CAACO,GAAG;IACjC,CAAC;IACD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,eAAe,EAAEO,CAAC,IAAI,CAAC,EAAE;MAC5CH,KAAK,CAAE,QAAOG,CAAE,GAAE,CAAC,GAAGC,MAAM,CAAE,GAAEP,CAAC,CAACQ,QAAQ,CAAC,CAAE,GAAEF,CAAE,EAAC,CAAC,CAAC,CAAC;IACvD;;IAEAR,IAAI,CAACW,IAAI,CAACN,KAAK,CAAC;EAClB;EACA,MAAMO,OAAO,GAAG,CAAC;IACfC,KAAK,EAAE,IAAI;IACXC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE;EACR,CAAC,EAAE;IACDF,KAAK,EAAE,cAAc;IACrBC,UAAU,EAAE;EACd,CAAC,CAAC;EACF,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,eAAe,EAAEO,CAAC,IAAI,CAAC,EAAE;IAC5C;IACAI,OAAO,CAACD,IAAI,CAAC;MACXE,KAAK,EAAG,QAAOL,CAAE,GAAE;MACnBM,UAAU,EAAG,GAAEN,CAAE,GAAE;MACnBO,IAAI,EAAE;IACR,CAAC,CAAC,CAAC,CAAC;EACN;;EAEAH,OAAO,CAACR,MAAM,GAAGL,SAAS,CAAC,CAAC;EAC5B,OAAO;IACLa,OAAO;IACPI,IAAI,EAAEhB;EACR,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}