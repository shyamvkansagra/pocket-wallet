{"ast":null,"code":"import * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  const isInScrollBottomArea = React.useRef(false);\n  const handleRowsScrollEnd = React.useCallback(scrollPosition => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    // Prevent the infite loading working in combination with lazy loading\n    if (!dimensions || props.rowsLoadingMode !== 'client') {\n      return;\n    }\n    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      const rowScrollEndParam = {\n        visibleColumns,\n        viewportPageSize,\n        visibleRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, props.rowsLoadingMode, visibleColumns, apiRef, currentPage.rows.length]);\n  const handleGridScroll = React.useCallback(({\n    left,\n    top\n  }) => {\n    handleRowsScrollEnd({\n      left,\n      top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, 'scrollPositionChange', handleGridScroll);\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};","map":{"version":3,"names":["React","useGridSelector","useGridApiEventHandler","useGridApiOptionHandler","gridVisibleColumnDefinitionsSelector","gridRowsMetaSelector","useGridVisibleRows","useGridInfiniteLoader","apiRef","props","visibleColumns","currentPage","rowsMeta","contentHeight","Math","max","currentPageTotalHeight","isInScrollBottomArea","useRef","handleRowsScrollEnd","useCallback","scrollPosition","dimensions","current","getRootDimensions","rowsLoadingMode","scrollPositionBottom","top","viewportOuterSize","height","viewportPageSize","getViewportPageSize","scrollEndThreshold","rowScrollEndParam","visibleRowsCount","rows","length","publishEvent","handleGridScroll","left","onRowsScrollEnd"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/infiniteLoader/useGridInfiniteLoader.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  const isInScrollBottomArea = React.useRef(false);\n  const handleRowsScrollEnd = React.useCallback(scrollPosition => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    // Prevent the infite loading working in combination with lazy loading\n    if (!dimensions || props.rowsLoadingMode !== 'client') {\n      return;\n    }\n    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      const rowScrollEndParam = {\n        visibleColumns,\n        viewportPageSize,\n        visibleRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, props.rowsLoadingMode, visibleColumns, apiRef, currentPage.rows.length]);\n  const handleGridScroll = React.useCallback(({\n    left,\n    top\n  }) => {\n    handleRowsScrollEnd({\n      left,\n      top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, 'scrollPositionChange', handleGridScroll);\n  useGridApiOptionHandler(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,eAAe,EAAEC,sBAAsB,EAAEC,uBAAuB,EAAEC,oCAAoC,EAAEC,oBAAoB,QAAQ,kBAAkB;AAC/J,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EACtD,MAAMC,cAAc,GAAGT,eAAe,CAACO,MAAM,EAAEJ,oCAAoC,CAAC;EACpF,MAAMO,WAAW,GAAGL,kBAAkB,CAACE,MAAM,EAAEC,KAAK,CAAC;EACrD,MAAMG,QAAQ,GAAGX,eAAe,CAACO,MAAM,EAAEH,oBAAoB,CAAC;EAC9D,MAAMQ,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACI,sBAAsB,EAAE,CAAC,CAAC;EAClE,MAAMC,oBAAoB,GAAGjB,KAAK,CAACkB,MAAM,CAAC,KAAK,CAAC;EAChD,MAAMC,mBAAmB,GAAGnB,KAAK,CAACoB,WAAW,CAACC,cAAc,IAAI;IAC9D,MAAMC,UAAU,GAAGd,MAAM,CAACe,OAAO,CAACC,iBAAiB,CAAC,CAAC;;IAErD;IACA,IAAI,CAACF,UAAU,IAAIb,KAAK,CAACgB,eAAe,KAAK,QAAQ,EAAE;MACrD;IACF;IACA,MAAMC,oBAAoB,GAAGL,cAAc,CAACM,GAAG,GAAGL,UAAU,CAACM,iBAAiB,CAACC,MAAM;IACrF,MAAMC,gBAAgB,GAAGtB,MAAM,CAACe,OAAO,CAACQ,mBAAmB,CAAC,CAAC;IAC7D,IAAIL,oBAAoB,GAAGb,aAAa,GAAGJ,KAAK,CAACuB,kBAAkB,EAAE;MACnEf,oBAAoB,CAACM,OAAO,GAAG,KAAK;IACtC;IACA,IAAIG,oBAAoB,IAAIb,aAAa,GAAGJ,KAAK,CAACuB,kBAAkB,IAAI,CAACf,oBAAoB,CAACM,OAAO,EAAE;MACrG,MAAMU,iBAAiB,GAAG;QACxBvB,cAAc;QACdoB,gBAAgB;QAChBI,gBAAgB,EAAEvB,WAAW,CAACwB,IAAI,CAACC;MACrC,CAAC;MACD5B,MAAM,CAACe,OAAO,CAACc,YAAY,CAAC,eAAe,EAAEJ,iBAAiB,CAAC;MAC/DhB,oBAAoB,CAACM,OAAO,GAAG,IAAI;IACrC;EACF,CAAC,EAAE,CAACV,aAAa,EAAEJ,KAAK,CAACuB,kBAAkB,EAAEvB,KAAK,CAACgB,eAAe,EAAEf,cAAc,EAAEF,MAAM,EAAEG,WAAW,CAACwB,IAAI,CAACC,MAAM,CAAC,CAAC;EACrH,MAAME,gBAAgB,GAAGtC,KAAK,CAACoB,WAAW,CAAC,CAAC;IAC1CmB,IAAI;IACJZ;EACF,CAAC,KAAK;IACJR,mBAAmB,CAAC;MAClBoB,IAAI;MACJZ;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACR,mBAAmB,CAAC,CAAC;EACzBjB,sBAAsB,CAACM,MAAM,EAAE,sBAAsB,EAAE8B,gBAAgB,CAAC;EACxEnC,uBAAuB,CAACK,MAAM,EAAE,eAAe,EAAEC,KAAK,CAAC+B,eAAe,CAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}