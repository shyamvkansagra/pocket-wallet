{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiMethod, gridDataRowIdsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelRawHeightCacheSelector } from './gridDetailPanelSelector';\nexport const detailPanelStateInitializer = (state, props) => {\n  var _ref, _props$detailPanelExp, _props$initialState;\n  return _extends({}, state, {\n    detailPanel: {\n      heightCache: {},\n      expandedRowIds: (_ref = (_props$detailPanelExp = props.detailPanelExpandedRowIds) != null ? _props$detailPanelExp : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.detailPanel) == null ? void 0 : _props$initialState.expandedRowIds) != null ? _ref : []\n    }\n  });\n};\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight, previousHeightCache) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  }\n\n  // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n  const rowIds = gridDataRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    var _previousHeightCache$;\n    if (contentCache[id] == null) {\n      return acc;\n    }\n    const params = apiRef.current.getRowParams(id);\n    const height = getDetailPanelHeight(params);\n    const autoHeight = height === 'auto';\n    acc[id] = {\n      autoHeight,\n      height: autoHeight ? (_previousHeightCache$ = previousHeightCache[id]) == null ? void 0 : _previousHeightCache$.height : height\n    };\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[params.id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    // Ignore if the user didn't click specifically in the \"i\" button\n    if (event.target === event.currentTarget) {\n      return;\n    }\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD && event.key === ' ') {\n      apiRef.current.toggleDetailPanel(params.id);\n    }\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  apiRef.current.registerControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: 'detailPanelsExpandedRowIdsChange'\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const storeDetailPanelHeight = React.useCallback((id, height) => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    if (!heightCache[id] || heightCache[id].height === height) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          heightCache: _extends({}, heightCache, {\n            [id]: _extends({}, heightCache[id], {\n              height\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.requestPipeProcessorsApplication('rowHeight');\n  }, [apiRef]);\n  const detailPanelHasAutoHeight = React.useCallback(id => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    return heightCache[id] ? heightCache[id].autoHeight : false;\n  }, [apiRef]);\n  const detailPanelPubicApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  const detailPanelPrivateApi = {\n    storeDetailPanelHeight,\n    detailPanelHasAutoHeight\n  };\n  useGridApiMethod(apiRef, detailPanelPubicApi, 'public');\n  useGridApiMethod(apiRef, detailPanelPrivateApi, 'private');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n  const updateCachesAndForceUpdate = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', updateCachesAndForceUpdate);\n  const previousGetDetailPanelContentProp = React.useRef();\n  const previousGetDetailPanelHeightProp = React.useRef();\n  const updateCachesIfNeeded = React.useCallback(() => {\n    if (props.getDetailPanelContent === previousGetDetailPanelContentProp.current && props.getDetailPanelHeight === previousGetDetailPanelHeightProp.current) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    previousGetDetailPanelContentProp.current = props.getDetailPanelContent;\n    previousGetDetailPanelHeightProp.current = props.getDetailPanelHeight;\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    var _heightCache$row$id;\n    if (!expandedRowIds || expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      initialValue.detail = 0;\n      return initialValue;\n    }\n    updateCachesIfNeeded();\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef);\n    initialValue.detail = (_heightCache$row$id = heightCache[row.id]) != null ? _heightCache$row$id : 0; // Fallback to zero because the cache might not be ready yet (e.g. page was changed)\n    return initialValue;\n  }, [apiRef, expandedRowIds, updateCachesIfNeeded]);\n  useGridRegisterPipeProcessor(apiRef, 'rowHeight', addDetailHeight);\n  const isFirstRender = React.useRef(true);\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCachesIfNeeded();\n  }\n};","map":{"version":3,"names":["_extends","React","useGridSelector","useGridApiEventHandler","useGridApiMethod","gridDataRowIdsSelector","useGridRegisterPipeProcessor","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridDetailPanelExpandedRowIdsSelector","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","gridDetailPanelRawHeightCacheSelector","detailPanelStateInitializer","state","props","_ref","_props$detailPanelExp","_props$initialState","detailPanel","heightCache","expandedRowIds","detailPanelExpandedRowIds","initialState","cacheContentAndHeight","apiRef","getDetailPanelContent","getDetailPanelHeight","previousHeightCache","rowIds","contentCache","reduce","acc","id","params","current","getRowParams","_previousHeightCache$","height","autoHeight","useGridDetailPanel","handleCellClick","useCallback","event","field","content","isValidElement","target","currentTarget","toggleDetailPanel","handleCellKeyDown","key","registerControlState","stateId","propModel","propOnChange","onDetailPanelExpandedRowIdsChange","stateSelector","changeEvent","ids","getExpandedDetailPanels","setExpandedDetailPanels","includes","filter","rowId","setState","forceUpdate","storeDetailPanelHeight","requestPipeProcessorsApplication","detailPanelHasAutoHeight","detailPanelPubicApi","detailPanelPrivateApi","useEffect","currentModel","updateCachesAndForceUpdate","previousGetDetailPanelContentProp","useRef","previousGetDetailPanelHeightProp","updateCachesIfNeeded","addDetailHeight","initialValue","row","_heightCache$row$id","length","detail","isFirstRender"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector, useGridApiEventHandler, useGridApiMethod, gridDataRowIdsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelRawHeightCacheSelector } from './gridDetailPanelSelector';\nexport const detailPanelStateInitializer = (state, props) => {\n  var _ref, _props$detailPanelExp, _props$initialState;\n  return _extends({}, state, {\n    detailPanel: {\n      heightCache: {},\n      expandedRowIds: (_ref = (_props$detailPanelExp = props.detailPanelExpandedRowIds) != null ? _props$detailPanelExp : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.detailPanel) == null ? void 0 : _props$initialState.expandedRowIds) != null ? _ref : []\n    }\n  });\n};\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight, previousHeightCache) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  }\n\n  // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n  const rowIds = gridDataRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    var _previousHeightCache$;\n    if (contentCache[id] == null) {\n      return acc;\n    }\n    const params = apiRef.current.getRowParams(id);\n    const height = getDetailPanelHeight(params);\n    const autoHeight = height === 'auto';\n    acc[id] = {\n      autoHeight,\n      height: autoHeight ? (_previousHeightCache$ = previousHeightCache[id]) == null ? void 0 : _previousHeightCache$.height : height\n    };\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[params.id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    // Ignore if the user didn't click specifically in the \"i\" button\n    if (event.target === event.currentTarget) {\n      return;\n    }\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD && event.key === ' ') {\n      apiRef.current.toggleDetailPanel(params.id);\n    }\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  apiRef.current.registerControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: 'detailPanelsExpandedRowIdsChange'\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n    const content = contentCache[id];\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const storeDetailPanelHeight = React.useCallback((id, height) => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    if (!heightCache[id] || heightCache[id].height === height) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          heightCache: _extends({}, heightCache, {\n            [id]: _extends({}, heightCache[id], {\n              height\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.requestPipeProcessorsApplication('rowHeight');\n  }, [apiRef]);\n  const detailPanelHasAutoHeight = React.useCallback(id => {\n    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef.current.state);\n    return heightCache[id] ? heightCache[id].autoHeight : false;\n  }, [apiRef]);\n  const detailPanelPubicApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  const detailPanelPrivateApi = {\n    storeDetailPanelHeight,\n    detailPanelHasAutoHeight\n  };\n  useGridApiMethod(apiRef, detailPanelPubicApi, 'public');\n  useGridApiMethod(apiRef, detailPanelPrivateApi, 'private');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n  const updateCachesAndForceUpdate = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', updateCachesAndForceUpdate);\n  const previousGetDetailPanelContentProp = React.useRef();\n  const previousGetDetailPanelHeightProp = React.useRef();\n  const updateCachesIfNeeded = React.useCallback(() => {\n    if (props.getDetailPanelContent === previousGetDetailPanelContentProp.current && props.getDetailPanelHeight === previousGetDetailPanelHeightProp.current) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))\n      });\n    });\n    previousGetDetailPanelContentProp.current = props.getDetailPanelContent;\n    previousGetDetailPanelHeightProp.current = props.getDetailPanelHeight;\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    var _heightCache$row$id;\n    if (!expandedRowIds || expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      initialValue.detail = 0;\n      return initialValue;\n    }\n    updateCachesIfNeeded();\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef);\n    initialValue.detail = (_heightCache$row$id = heightCache[row.id]) != null ? _heightCache$row$id : 0; // Fallback to zero because the cache might not be ready yet (e.g. page was changed)\n    return initialValue;\n  }, [apiRef, expandedRowIds, updateCachesIfNeeded]);\n  useGridRegisterPipeProcessor(apiRef, 'rowHeight', addDetailHeight);\n  const isFirstRender = React.useRef(true);\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCachesIfNeeded();\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}