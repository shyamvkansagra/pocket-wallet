{"ast":null,"code":"import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { buildRootGroup } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\n/**\n * Transform a list of rows into a tree structure where each row references its parent and children.\n */\nexport const createRowTree = params => {\n  const dataRowIds = [];\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: buildRootGroup()\n  };\n  const treeDepths = {};\n  for (let i = 0; i < params.nodes.length; i += 1) {\n    const node = params.nodes[i];\n    dataRowIds.push(node.id);\n    insertDataRowInTree({\n      tree,\n      previousTree: params.previousTree,\n      id: node.id,\n      path: node.path,\n      onDuplicatePath: params.onDuplicatePath,\n      treeDepths,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds\n  };\n};","map":{"version":3,"names":["GRID_ROOT_GROUP_ID","buildRootGroup","insertDataRowInTree","createRowTree","params","dataRowIds","tree","treeDepths","i","nodes","length","node","push","id","previousTree","path","onDuplicatePath","isGroupExpandedByDefault","defaultGroupingExpansionDepth","groupingName"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/utils/tree/createRowTree.js"],"sourcesContent":["import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nimport { buildRootGroup } from '@mui/x-data-grid/internals';\nimport { insertDataRowInTree } from './insertDataRowInTree';\n/**\n * Transform a list of rows into a tree structure where each row references its parent and children.\n */\nexport const createRowTree = params => {\n  const dataRowIds = [];\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: buildRootGroup()\n  };\n  const treeDepths = {};\n  for (let i = 0; i < params.nodes.length; i += 1) {\n    const node = params.nodes[i];\n    dataRowIds.push(node.id);\n    insertDataRowInTree({\n      tree,\n      previousTree: params.previousTree,\n      id: node.id,\n      path: node.path,\n      onDuplicatePath: params.onDuplicatePath,\n      treeDepths,\n      isGroupExpandedByDefault: params.isGroupExpandedByDefault,\n      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth\n    });\n  }\n  return {\n    tree,\n    treeDepths,\n    groupingName: params.groupingName,\n    dataRowIds\n  };\n};"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGC,MAAM,IAAI;EACrC,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,IAAI,GAAG;IACX,CAACN,kBAAkB,GAAGC,cAAc,CAAC;EACvC,CAAC;EACD,MAAMM,UAAU,GAAG,CAAC,CAAC;EACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACK,KAAK,CAACC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAC/C,MAAMG,IAAI,GAAGP,MAAM,CAACK,KAAK,CAACD,CAAC,CAAC;IAC5BH,UAAU,CAACO,IAAI,CAACD,IAAI,CAACE,EAAE,CAAC;IACxBX,mBAAmB,CAAC;MAClBI,IAAI;MACJQ,YAAY,EAAEV,MAAM,CAACU,YAAY;MACjCD,EAAE,EAAEF,IAAI,CAACE,EAAE;MACXE,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfC,eAAe,EAAEZ,MAAM,CAACY,eAAe;MACvCT,UAAU;MACVU,wBAAwB,EAAEb,MAAM,CAACa,wBAAwB;MACzDC,6BAA6B,EAAEd,MAAM,CAACc;IACxC,CAAC,CAAC;EACJ;EACA,OAAO;IACLZ,IAAI;IACJC,UAAU;IACVY,YAAY,EAAEf,MAAM,CAACe,YAAY;IACjCd;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}