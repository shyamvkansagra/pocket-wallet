{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport LRUCache from 'lru-cache';\nimport { getRealGridData } from '../services/real-data-service';\nimport { getCommodityColumns } from '../columns/commodities.columns';\nimport { getEmployeeColumns } from '../columns/employees.columns';\nimport asyncWorker from '../services/asyncWorker';\nimport { addTreeDataOptionsToDemoData } from '../services/tree-data-generator';\nconst dataCache = new LRUCache({\n  max: 10,\n  ttl: 60 * 5 * 1e3 // 5 minutes\n});\n\n// Generate fake data from a seed.\n// It's about x20 faster than getRealData.\nasync function extrapolateSeed(rowLength, data) {\n  return new Promise(resolve => {\n    const seed = data.rows;\n    const rows = data.rows.slice();\n    const tasks = {\n      current: rowLength - seed.length\n    };\n    function work() {\n      const row = {};\n      for (let j = 0; j < data.columns.length; j += 1) {\n        const column = data.columns[j];\n        const index = Math.round(Math.random() * (seed.length - 1));\n        if (column.field === 'id') {\n          row.id = `id-${tasks.current + seed.length}`;\n        } else {\n          row[column.field] = seed[index][column.field];\n        }\n      }\n      rows.push(row);\n      tasks.current -= 1;\n    }\n    asyncWorker({\n      work,\n      done: () => resolve(_extends({}, data, {\n        rows\n      })),\n      tasks\n    });\n  });\n}\nconst deepFreeze = object => {\n  // Retrieve the property names defined on object\n  const propNames = Object.getOwnPropertyNames(object);\n\n  // Freeze properties before freezing self\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of propNames) {\n    const value = object[name];\n    if (value && typeof value === 'object') {\n      deepFreeze(value);\n    }\n  }\n  return Object.freeze(object);\n};\nexport const getColumnsFromOptions = options => {\n  let columns = options.dataSet === 'Commodity' ? getCommodityColumns(options.editable) : getEmployeeColumns();\n  if (options.visibleFields) {\n    columns = columns.map(col => {\n      var _options$visibleField;\n      return (_options$visibleField = options.visibleFields) != null && _options$visibleField.includes(col.field) ? col : _extends({}, col, {\n        hide: true\n      });\n    });\n  }\n  if (options.maxColumns) {\n    columns = columns.slice(0, options.maxColumns);\n  }\n  return columns;\n};\nexport const getInitialState = (options, columns) => {\n  var _options$treeData;\n  const columnVisibilityModel = {};\n  columns.forEach(col => {\n    if (col.hide) {\n      columnVisibilityModel[col.field] = false;\n    }\n  });\n  const groupingField = (_options$treeData = options.treeData) == null ? void 0 : _options$treeData.groupingField;\n  if (groupingField) {\n    columnVisibilityModel[groupingField] = false;\n  }\n  return {\n    columns: {\n      columnVisibilityModel\n    }\n  };\n};\nexport const useDemoData = options => {\n  var _options$treeData5, _options$treeData6, _options$treeData7;\n  const [rowLength, setRowLength] = React.useState(options.rowLength);\n  const [index, setIndex] = React.useState(0);\n  const [loading, setLoading] = React.useState(true);\n  const columns = React.useMemo(() => {\n    return getColumnsFromOptions({\n      dataSet: options.dataSet,\n      editable: options.editable,\n      maxColumns: options.maxColumns,\n      visibleFields: options.visibleFields\n    });\n  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);\n  const [data, setData] = React.useState(() => {\n    return addTreeDataOptionsToDemoData({\n      columns,\n      rows: [],\n      initialState: getInitialState(options, columns)\n    }, options.treeData);\n  });\n  React.useEffect(() => {\n    const cacheKey = `${options.dataSet}-${rowLength}-${index}-${options.maxColumns}`;\n\n    // Cache to allow fast switch between the JavaScript and TypeScript version\n    // of the demos.\n    if (dataCache.has(cacheKey)) {\n      const newData = dataCache.get(cacheKey);\n      setData(newData);\n      setLoading(false);\n      return undefined;\n    }\n    let active = true;\n    (async (_options$treeData2, _options$treeData3, _options$treeData4) => {\n      setLoading(true);\n      let newData;\n      if (rowLength > 1000) {\n        newData = await getRealGridData(1000, columns);\n        newData = await extrapolateSeed(rowLength, newData);\n      } else {\n        newData = await getRealGridData(rowLength, columns);\n      }\n      if (!active) {\n        return;\n      }\n      newData = addTreeDataOptionsToDemoData(newData, {\n        maxDepth: (_options$treeData2 = options.treeData) == null ? void 0 : _options$treeData2.maxDepth,\n        groupingField: (_options$treeData3 = options.treeData) == null ? void 0 : _options$treeData3.groupingField,\n        averageChildren: (_options$treeData4 = options.treeData) == null ? void 0 : _options$treeData4.averageChildren\n      });\n\n      // It's quite slow. No need for it in production.\n      if (process.env.NODE_ENV !== 'production') {\n        deepFreeze(newData);\n      }\n      dataCache.set(cacheKey, newData);\n      setData(newData);\n      setLoading(false);\n    })();\n    return () => {\n      active = false;\n    };\n  }, [rowLength, options.dataSet, options.maxColumns, (_options$treeData5 = options.treeData) == null ? void 0 : _options$treeData5.maxDepth, (_options$treeData6 = options.treeData) == null ? void 0 : _options$treeData6.groupingField, (_options$treeData7 = options.treeData) == null ? void 0 : _options$treeData7.averageChildren, index, columns]);\n  return {\n    data,\n    loading,\n    setRowLength,\n    loadNewData: () => {\n      setIndex(oldIndex => oldIndex + 1);\n    }\n  };\n};","map":{"version":3,"names":["_extends","React","LRUCache","getRealGridData","getCommodityColumns","getEmployeeColumns","asyncWorker","addTreeDataOptionsToDemoData","dataCache","max","ttl","extrapolateSeed","rowLength","data","Promise","resolve","seed","rows","slice","tasks","current","length","work","row","j","columns","column","index","Math","round","random","field","id","push","done","deepFreeze","object","propNames","Object","getOwnPropertyNames","name","value","freeze","getColumnsFromOptions","options","dataSet","editable","visibleFields","map","col","_options$visibleField","includes","hide","maxColumns","getInitialState","_options$treeData","columnVisibilityModel","forEach","groupingField","treeData","useDemoData","_options$treeData5","_options$treeData6","_options$treeData7","setRowLength","useState","setIndex","loading","setLoading","useMemo","setData","initialState","useEffect","cacheKey","has","newData","get","undefined","active","_options$treeData2","_options$treeData3","_options$treeData4","maxDepth","averageChildren","process","env","NODE_ENV","set","loadNewData","oldIndex"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport LRUCache from 'lru-cache';\nimport { getRealGridData } from '../services/real-data-service';\nimport { getCommodityColumns } from '../columns/commodities.columns';\nimport { getEmployeeColumns } from '../columns/employees.columns';\nimport asyncWorker from '../services/asyncWorker';\nimport { addTreeDataOptionsToDemoData } from '../services/tree-data-generator';\nconst dataCache = new LRUCache({\n  max: 10,\n  ttl: 60 * 5 * 1e3 // 5 minutes\n});\n\n// Generate fake data from a seed.\n// It's about x20 faster than getRealData.\nasync function extrapolateSeed(rowLength, data) {\n  return new Promise(resolve => {\n    const seed = data.rows;\n    const rows = data.rows.slice();\n    const tasks = {\n      current: rowLength - seed.length\n    };\n    function work() {\n      const row = {};\n      for (let j = 0; j < data.columns.length; j += 1) {\n        const column = data.columns[j];\n        const index = Math.round(Math.random() * (seed.length - 1));\n        if (column.field === 'id') {\n          row.id = `id-${tasks.current + seed.length}`;\n        } else {\n          row[column.field] = seed[index][column.field];\n        }\n      }\n      rows.push(row);\n      tasks.current -= 1;\n    }\n    asyncWorker({\n      work,\n      done: () => resolve(_extends({}, data, {\n        rows\n      })),\n      tasks\n    });\n  });\n}\nconst deepFreeze = object => {\n  // Retrieve the property names defined on object\n  const propNames = Object.getOwnPropertyNames(object);\n\n  // Freeze properties before freezing self\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of propNames) {\n    const value = object[name];\n    if (value && typeof value === 'object') {\n      deepFreeze(value);\n    }\n  }\n  return Object.freeze(object);\n};\nexport const getColumnsFromOptions = options => {\n  let columns = options.dataSet === 'Commodity' ? getCommodityColumns(options.editable) : getEmployeeColumns();\n  if (options.visibleFields) {\n    columns = columns.map(col => {\n      var _options$visibleField;\n      return (_options$visibleField = options.visibleFields) != null && _options$visibleField.includes(col.field) ? col : _extends({}, col, {\n        hide: true\n      });\n    });\n  }\n  if (options.maxColumns) {\n    columns = columns.slice(0, options.maxColumns);\n  }\n  return columns;\n};\nexport const getInitialState = (options, columns) => {\n  var _options$treeData;\n  const columnVisibilityModel = {};\n  columns.forEach(col => {\n    if (col.hide) {\n      columnVisibilityModel[col.field] = false;\n    }\n  });\n  const groupingField = (_options$treeData = options.treeData) == null ? void 0 : _options$treeData.groupingField;\n  if (groupingField) {\n    columnVisibilityModel[groupingField] = false;\n  }\n  return {\n    columns: {\n      columnVisibilityModel\n    }\n  };\n};\nexport const useDemoData = options => {\n  var _options$treeData5, _options$treeData6, _options$treeData7;\n  const [rowLength, setRowLength] = React.useState(options.rowLength);\n  const [index, setIndex] = React.useState(0);\n  const [loading, setLoading] = React.useState(true);\n  const columns = React.useMemo(() => {\n    return getColumnsFromOptions({\n      dataSet: options.dataSet,\n      editable: options.editable,\n      maxColumns: options.maxColumns,\n      visibleFields: options.visibleFields\n    });\n  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);\n  const [data, setData] = React.useState(() => {\n    return addTreeDataOptionsToDemoData({\n      columns,\n      rows: [],\n      initialState: getInitialState(options, columns)\n    }, options.treeData);\n  });\n  React.useEffect(() => {\n    const cacheKey = `${options.dataSet}-${rowLength}-${index}-${options.maxColumns}`;\n\n    // Cache to allow fast switch between the JavaScript and TypeScript version\n    // of the demos.\n    if (dataCache.has(cacheKey)) {\n      const newData = dataCache.get(cacheKey);\n      setData(newData);\n      setLoading(false);\n      return undefined;\n    }\n    let active = true;\n    (async (_options$treeData2, _options$treeData3, _options$treeData4) => {\n      setLoading(true);\n      let newData;\n      if (rowLength > 1000) {\n        newData = await getRealGridData(1000, columns);\n        newData = await extrapolateSeed(rowLength, newData);\n      } else {\n        newData = await getRealGridData(rowLength, columns);\n      }\n      if (!active) {\n        return;\n      }\n      newData = addTreeDataOptionsToDemoData(newData, {\n        maxDepth: (_options$treeData2 = options.treeData) == null ? void 0 : _options$treeData2.maxDepth,\n        groupingField: (_options$treeData3 = options.treeData) == null ? void 0 : _options$treeData3.groupingField,\n        averageChildren: (_options$treeData4 = options.treeData) == null ? void 0 : _options$treeData4.averageChildren\n      });\n\n      // It's quite slow. No need for it in production.\n      if (process.env.NODE_ENV !== 'production') {\n        deepFreeze(newData);\n      }\n      dataCache.set(cacheKey, newData);\n      setData(newData);\n      setLoading(false);\n    })();\n    return () => {\n      active = false;\n    };\n  }, [rowLength, options.dataSet, options.maxColumns, (_options$treeData5 = options.treeData) == null ? void 0 : _options$treeData5.maxDepth, (_options$treeData6 = options.treeData) == null ? void 0 : _options$treeData6.groupingField, (_options$treeData7 = options.treeData) == null ? void 0 : _options$treeData7.averageChildren, index, columns]);\n  return {\n    data,\n    loading,\n    setRowLength,\n    loadNewData: () => {\n      setIndex(oldIndex => oldIndex + 1);\n    }\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}