{"ast":null,"code":"import { useGridInitialization, useGridInitializeState, useGridClipboard, useGridColumnMenu, useGridColumns, columnsStateInitializer, useGridDensity, useGridCsvExport, useGridPrintExport, useGridFilter, filterStateInitializer, useGridFocus, useGridKeyboardNavigation, useGridPagination, paginationStateInitializer, useGridPreferencesPanel, useGridEditing, editingStateInitializer, useGridRows, useGridRowsPreProcessors, rowsStateInitializer, useGridRowsMeta, useGridParamsApi, useGridRowSelection, useGridSorting, sortingStateInitializer, useGridScroll, useGridEvents, useGridDimensions, useGridStatePersistence, useGridRowSelectionPreProcessors, useGridColumnSpanning, columnMenuStateInitializer, densityStateInitializer, focusStateInitializer, preferencePanelStateInitializer, rowsMetaStateInitializer, rowSelectionStateInitializer, useGridColumnGrouping, columnGroupsStateInitializer, headerFilteringStateInitializer, useGridHeaderFiltering } from '@mui/x-data-grid/internals';\n// Pro-only features\nimport { useGridInfiniteLoader } from '../hooks/features/infiniteLoader/useGridInfiniteLoader';\nimport { useGridColumnReorder, columnReorderStateInitializer } from '../hooks/features/columnReorder/useGridColumnReorder';\nimport { useGridColumnResize, columnResizeStateInitializer } from '../hooks/features/columnResize/useGridColumnResize';\nimport { useGridTreeData } from '../hooks/features/treeData/useGridTreeData';\nimport { useGridTreeDataPreProcessors } from '../hooks/features/treeData/useGridTreeDataPreProcessors';\nimport { useGridColumnPinning, columnPinningStateInitializer } from '../hooks/features/columnPinning/useGridColumnPinning';\nimport { useGridColumnPinningPreProcessors } from '../hooks/features/columnPinning/useGridColumnPinningPreProcessors';\nimport { useGridDetailPanel, detailPanelStateInitializer } from '../hooks/features/detailPanel/useGridDetailPanel';\nimport { useGridDetailPanelPreProcessors } from '../hooks/features/detailPanel/useGridDetailPanelPreProcessors';\nimport { useGridRowReorder } from '../hooks/features/rowReorder/useGridRowReorder';\nimport { useGridRowReorderPreProcessors } from '../hooks/features/rowReorder/useGridRowReorderPreProcessors';\nimport { useGridLazyLoader } from '../hooks/features/lazyLoader/useGridLazyLoader';\nimport { useGridLazyLoaderPreProcessors } from '../hooks/features/lazyLoader/useGridLazyLoaderPreProcessors';\nimport { useGridRowPinning, rowPinningStateInitializer } from '../hooks/features/rowPinning/useGridRowPinning';\nimport { useGridRowPinningPreProcessors } from '../hooks/features/rowPinning/useGridRowPinningPreProcessors';\nexport const useDataGridProComponent = (inputApiRef, props) => {\n  const apiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(apiRef, props);\n  useGridRowReorderPreProcessors(apiRef, props);\n  useGridTreeDataPreProcessors(apiRef, props);\n  useGridLazyLoaderPreProcessors(apiRef, props);\n  useGridRowPinningPreProcessors(apiRef);\n  useGridDetailPanelPreProcessors(apiRef, props);\n  // The column pinning `hydrateColumns` pre-processor must be after every other `hydrateColumns` pre-processors\n  // Because it changes the order of the columns.\n  useGridColumnPinningPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(headerFilteringStateInitializer, apiRef, props);\n  useGridInitializeState(rowSelectionStateInitializer, apiRef, props);\n  useGridInitializeState(detailPanelStateInitializer, apiRef, props);\n  useGridInitializeState(columnPinningStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowPinningStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState(editingStateInitializer, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnReorderStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridHeaderFiltering(apiRef, props);\n  useGridTreeData(apiRef);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridRowSelection(apiRef, props);\n  useGridColumnPinning(apiRef, props);\n  useGridRowPinning(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef, props);\n  useGridDetailPanel(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnReorder(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridRowReorder(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridInfiniteLoader(apiRef, props);\n  useGridLazyLoader(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef, props);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef, props);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};","map":{"version":3,"names":["useGridInitialization","useGridInitializeState","useGridClipboard","useGridColumnMenu","useGridColumns","columnsStateInitializer","useGridDensity","useGridCsvExport","useGridPrintExport","useGridFilter","filterStateInitializer","useGridFocus","useGridKeyboardNavigation","useGridPagination","paginationStateInitializer","useGridPreferencesPanel","useGridEditing","editingStateInitializer","useGridRows","useGridRowsPreProcessors","rowsStateInitializer","useGridRowsMeta","useGridParamsApi","useGridRowSelection","useGridSorting","sortingStateInitializer","useGridScroll","useGridEvents","useGridDimensions","useGridStatePersistence","useGridRowSelectionPreProcessors","useGridColumnSpanning","columnMenuStateInitializer","densityStateInitializer","focusStateInitializer","preferencePanelStateInitializer","rowsMetaStateInitializer","rowSelectionStateInitializer","useGridColumnGrouping","columnGroupsStateInitializer","headerFilteringStateInitializer","useGridHeaderFiltering","useGridInfiniteLoader","useGridColumnReorder","columnReorderStateInitializer","useGridColumnResize","columnResizeStateInitializer","useGridTreeData","useGridTreeDataPreProcessors","useGridColumnPinning","columnPinningStateInitializer","useGridColumnPinningPreProcessors","useGridDetailPanel","detailPanelStateInitializer","useGridDetailPanelPreProcessors","useGridRowReorder","useGridRowReorderPreProcessors","useGridLazyLoader","useGridLazyLoaderPreProcessors","useGridRowPinning","rowPinningStateInitializer","useGridRowPinningPreProcessors","useDataGridProComponent","inputApiRef","props","apiRef"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/DataGridPro/useDataGridProComponent.js"],"sourcesContent":["import { useGridInitialization, useGridInitializeState, useGridClipboard, useGridColumnMenu, useGridColumns, columnsStateInitializer, useGridDensity, useGridCsvExport, useGridPrintExport, useGridFilter, filterStateInitializer, useGridFocus, useGridKeyboardNavigation, useGridPagination, paginationStateInitializer, useGridPreferencesPanel, useGridEditing, editingStateInitializer, useGridRows, useGridRowsPreProcessors, rowsStateInitializer, useGridRowsMeta, useGridParamsApi, useGridRowSelection, useGridSorting, sortingStateInitializer, useGridScroll, useGridEvents, useGridDimensions, useGridStatePersistence, useGridRowSelectionPreProcessors, useGridColumnSpanning, columnMenuStateInitializer, densityStateInitializer, focusStateInitializer, preferencePanelStateInitializer, rowsMetaStateInitializer, rowSelectionStateInitializer, useGridColumnGrouping, columnGroupsStateInitializer, headerFilteringStateInitializer, useGridHeaderFiltering } from '@mui/x-data-grid/internals';\n// Pro-only features\nimport { useGridInfiniteLoader } from '../hooks/features/infiniteLoader/useGridInfiniteLoader';\nimport { useGridColumnReorder, columnReorderStateInitializer } from '../hooks/features/columnReorder/useGridColumnReorder';\nimport { useGridColumnResize, columnResizeStateInitializer } from '../hooks/features/columnResize/useGridColumnResize';\nimport { useGridTreeData } from '../hooks/features/treeData/useGridTreeData';\nimport { useGridTreeDataPreProcessors } from '../hooks/features/treeData/useGridTreeDataPreProcessors';\nimport { useGridColumnPinning, columnPinningStateInitializer } from '../hooks/features/columnPinning/useGridColumnPinning';\nimport { useGridColumnPinningPreProcessors } from '../hooks/features/columnPinning/useGridColumnPinningPreProcessors';\nimport { useGridDetailPanel, detailPanelStateInitializer } from '../hooks/features/detailPanel/useGridDetailPanel';\nimport { useGridDetailPanelPreProcessors } from '../hooks/features/detailPanel/useGridDetailPanelPreProcessors';\nimport { useGridRowReorder } from '../hooks/features/rowReorder/useGridRowReorder';\nimport { useGridRowReorderPreProcessors } from '../hooks/features/rowReorder/useGridRowReorderPreProcessors';\nimport { useGridLazyLoader } from '../hooks/features/lazyLoader/useGridLazyLoader';\nimport { useGridLazyLoaderPreProcessors } from '../hooks/features/lazyLoader/useGridLazyLoaderPreProcessors';\nimport { useGridRowPinning, rowPinningStateInitializer } from '../hooks/features/rowPinning/useGridRowPinning';\nimport { useGridRowPinningPreProcessors } from '../hooks/features/rowPinning/useGridRowPinningPreProcessors';\nexport const useDataGridProComponent = (inputApiRef, props) => {\n  const apiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(apiRef, props);\n  useGridRowReorderPreProcessors(apiRef, props);\n  useGridTreeDataPreProcessors(apiRef, props);\n  useGridLazyLoaderPreProcessors(apiRef, props);\n  useGridRowPinningPreProcessors(apiRef);\n  useGridDetailPanelPreProcessors(apiRef, props);\n  // The column pinning `hydrateColumns` pre-processor must be after every other `hydrateColumns` pre-processors\n  // Because it changes the order of the columns.\n  useGridColumnPinningPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(headerFilteringStateInitializer, apiRef, props);\n  useGridInitializeState(rowSelectionStateInitializer, apiRef, props);\n  useGridInitializeState(detailPanelStateInitializer, apiRef, props);\n  useGridInitializeState(columnPinningStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowPinningStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState(editingStateInitializer, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnReorderStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridHeaderFiltering(apiRef, props);\n  useGridTreeData(apiRef);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridRowSelection(apiRef, props);\n  useGridColumnPinning(apiRef, props);\n  useGridRowPinning(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef, props);\n  useGridDetailPanel(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnReorder(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridRowReorder(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridInfiniteLoader(apiRef, props);\n  useGridLazyLoader(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef, props);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef, props);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}