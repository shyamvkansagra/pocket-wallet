{"ast":null,"code":"import * as React from 'react';\nimport { gridColumnLookupSelector, gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor, sortRowTree, createRowTree, updateRowTree, getVisibleRowsLookup } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability, getCellGroupingCriteria, getGroupingRules } from './gridRowGroupingUtils';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n    const groupingColDefProp = props.groupingColDef;\n\n    // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {};\n\n    // We only keep the non-grouping columns\n    columnsState.orderedFields.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    });\n\n    // We add the grouping column\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => getCellGroupingCriteria({\n        row,\n        id: rowId,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field]\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: ROW_GROUPING_STRATEGY\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};","map":{"version":3,"names":["React","gridColumnLookupSelector","gridRowTreeSelector","useFirstRender","GRID_CHECKBOX_SELECTION_FIELD","useGridRegisterPipeProcessor","useGridRegisterStrategyProcessor","sortRowTree","createRowTree","updateRowTree","getVisibleRowsLookup","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","createGroupingColDefForAllGroupingCriteria","createGroupingColDefForOneGroupingCriteria","filterRowTreeFromGroupingColumns","getColDefOverrides","ROW_GROUPING_STRATEGY","isGroupingColumn","setStrategyAvailability","getCellGroupingCriteria","getGroupingRules","useGridRowGroupingPreProcessors","apiRef","props","getGroupingColDefs","useCallback","columnsState","disableRowGrouping","groupingColDefProp","groupingColDef","rowGroupingModel","filter","field","lookup","length","rowGroupingColumnMode","colDefOverride","columnsLookup","map","groupingCriteria","groupedByColDef","updateGroupingColumn","groupingColDefs","newColumnFields","newColumnsLookup","orderedFields","forEach","push","matchingGroupingColDef","width","flex","startIndex","slice","colDef","createRowTreeForRowGrouping","params","sanitizedRowGroupingModel","groupingRules","current","caches","rowGrouping","rulesOnLastRowTreeCreation","getRowTreeBuilderNode","rowId","row","dataRowIdToModelLookup","parentPath","groupingRule","id","cell","key","leafGroupingCriteria","toString","path","updates","type","previousTree","nodes","rows","defaultGroupingExpansionDepth","isGroupExpandedByDefault","groupingName","inserted","actions","insert","modified","modify","removed","remove","previousTreeDepth","previousTreeDepths","filterRows","rowTree","isRowMatchingFilters","filterModel","sortRows","sortRowList","disableChildrenSorting","shouldRenderGroupBelowLeaves","isFirstRender","useRef","useEffect"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js"],"sourcesContent":["import * as React from 'react';\nimport { gridColumnLookupSelector, gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor, sortRowTree, createRowTree, updateRowTree, getVisibleRowsLookup } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability, getCellGroupingCriteria, getGroupingRules } from './gridRowGroupingUtils';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n    const groupingColDefProp = props.groupingColDef;\n\n    // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {};\n\n    // We only keep the non-grouping columns\n    columnsState.orderedFields.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    });\n\n    // We add the grouping column\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => getCellGroupingCriteria({\n        row,\n        id: rowId,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field]\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: ROW_GROUPING_STRATEGY\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}