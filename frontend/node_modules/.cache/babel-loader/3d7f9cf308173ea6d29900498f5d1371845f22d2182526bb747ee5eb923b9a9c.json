{"ast":null,"code":"import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    apiRef,\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterResults = {\n    passingFilterItems: null,\n    passingQuickFilterValues: null\n  };\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const row = apiRef.current.getRow(node.id);\n      isRowMatchingFilters(row, undefined, filterResults);\n      isMatchingFilters = passFilterLogic([filterResults.passingFilterItems], [filterResults.passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        var _isMatchingFilters;\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    let shouldPassFilters;\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n    filteredRowsLookup[node.id] = shouldPassFilters;\n    if (!shouldPassFilters) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n    return filteredDescendantCount + 1;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};","map":{"version":3,"names":["passFilterLogic","TREE_DATA_STRATEGY","filterRowTreeFromTreeData","params","apiRef","rowTree","disableChildrenFiltering","isRowMatchingFilters","filteredRowsLookup","filteredDescendantCountLookup","filterCache","filterResults","passingFilterItems","passingQuickFilterValues","filterTreeNode","node","isParentMatchingFilters","areAncestorsExpanded","shouldSkipFilters","depth","isMatchingFilters","type","row","current","getRow","id","undefined","filterModel","filteredDescendantCount","children","forEach","childId","_isMatchingFilters","childNode","childSubTreeSize","childrenExpanded","shouldPassFilters","nodes","Object","values","i","length"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/gridTreeDataUtils.js"],"sourcesContent":["import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    apiRef,\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterResults = {\n    passingFilterItems: null,\n    passingQuickFilterValues: null\n  };\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const row = apiRef.current.getRow(node.id);\n      isRowMatchingFilters(row, undefined, filterResults);\n      isMatchingFilters = passFilterLogic([filterResults.passingFilterItems], [filterResults.passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        var _isMatchingFilters;\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    let shouldPassFilters;\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n    filteredRowsLookup[node.id] = shouldPassFilters;\n    if (!shouldPassFilters) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n    return filteredDescendantCount + 1;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}