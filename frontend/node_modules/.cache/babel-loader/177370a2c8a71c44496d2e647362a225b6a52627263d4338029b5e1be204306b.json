{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$aggregationMod, _props$initialState;\n  apiRef.current.caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: (_ref = (_props$aggregationMod = props.aggregationModel) != null ? _props$aggregationMod : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.aggregation) == null ? void 0 : _props$initialState.model) != null ? _ref : {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'public');\n\n  /**\n   * EVENTS\n   */\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n\n    // Re-apply the row hydration to add / remove the aggregation footers\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    }\n\n    // Re-apply the column hydration to wrap / unwrap the aggregated columns\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};","map":{"version":3,"names":["_extends","React","gridColumnLookupSelector","useGridApiEventHandler","useGridApiMethod","gridAggregationModelSelector","getAggregationRules","mergeStateWithAggregationModel","areAggregationRulesEqual","createAggregationLookup","aggregationStateInitializer","state","props","apiRef","_ref","_props$aggregationMod","_props$initialState","current","caches","aggregation","rulesOnLastColumnHydration","rulesOnLastRowHydration","model","aggregationModel","initialState","useGridAggregation","registerControlState","stateId","propModel","propOnChange","onAggregationModelChange","stateSelector","changeEvent","setAggregationModel","useCallback","currentModel","setState","forceUpdate","applyAggregation","aggregationLookup","getAggregationPosition","aggregationFunctions","aggregationRowsScope","lookup","aggregationApi","checkAggregationRulesDiff","aggregationRules","disableAggregation","columnsLookup","requestPipeProcessorsApplication","useEffect","undefined"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/useGridAggregation.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$aggregationMod, _props$initialState;\n  apiRef.current.caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: (_ref = (_props$aggregationMod = props.aggregationModel) != null ? _props$aggregationMod : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.aggregation) == null ? void 0 : _props$initialState.model) != null ? _ref : {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'public');\n\n  /**\n   * EVENTS\n   */\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n\n    // Re-apply the row hydration to add / remove the aggregation footers\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    }\n\n    // Re-apply the column hydration to wrap / unwrap the aggregated columns\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}