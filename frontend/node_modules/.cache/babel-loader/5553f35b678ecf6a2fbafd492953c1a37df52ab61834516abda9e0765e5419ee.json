{"ast":null,"code":"import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","map":{"version":3,"names":["isNumber","sumAgg","apply","values","sum","i","length","value","columnTypes","avgAgg","params","minAgg","min","Infinity","maxAgg","max","sizeAgg","valueFormatter","toLocaleString","hasCellUnit","GRID_AGGREGATION_FUNCTIONS","avg","size"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationFunctions.js"],"sourcesContent":["import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}