{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"hideDescendantCount\"];\nimport * as React from 'react';\nimport { gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_TREE_DATA_GROUPING_COL_DEF, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES } from './gridTreeDataGroupColDef';\nimport { filterRowTreeFromTreeData, TREE_DATA_STRATEGY } from './gridTreeDataUtils';\nimport { GridTreeDataGroupingCell } from '../../../components';\nimport { createRowTree } from '../../../utils/tree/createRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nimport { updateRowTree } from '../../../utils/tree/updateRowTree';\nimport { getVisibleRowsLookup } from '../../../utils/tree/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridTreeDataPreProcessors = (privateApiRef, props) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    privateApiRef.current.setStrategyAvailability('rowTree', TREE_DATA_STRATEGY, props.treeData ? () => true : () => false);\n  }, [privateApiRef, props.treeData]);\n  const getGroupingColDef = React.useCallback(() => {\n    var _colDefOverride;\n    const groupingColDefProp = props.groupingColDef;\n    let colDefOverride;\n    if (typeof groupingColDefProp === 'function') {\n      const params = {\n        groupingName: TREE_DATA_STRATEGY,\n        fields: []\n      };\n      colDefOverride = groupingColDefProp(params);\n    } else {\n      colDefOverride = groupingColDefProp;\n    }\n    const _ref = (_colDefOverride = colDefOverride) != null ? _colDefOverride : {},\n      {\n        hideDescendantCount\n      } = _ref,\n      colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {\n      renderCell: params => /*#__PURE__*/_jsx(GridTreeDataGroupingCell, _extends({}, params, {\n        hideDescendantCount: hideDescendantCount\n      })),\n      headerName: privateApiRef.current.getLocaleText('treeDataGroupingHeaderName')\n    });\n    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);\n  }, [privateApiRef, props.groupingColDef]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;\n    const shouldHaveGroupingColumn = props.treeData;\n    const prevGroupingColumn = columnsState.lookup[groupingColDefField];\n    if (shouldHaveGroupingColumn) {\n      const newGroupingColumn = getGroupingColDef();\n      if (prevGroupingColumn) {\n        newGroupingColumn.width = prevGroupingColumn.width;\n        newGroupingColumn.flex = prevGroupingColumn.flex;\n      }\n      columnsState.lookup[groupingColDefField] = newGroupingColumn;\n      if (prevGroupingColumn == null) {\n        const index = columnsState.orderedFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n        columnsState.orderedFields = [...columnsState.orderedFields.slice(0, index), groupingColDefField, ...columnsState.orderedFields.slice(index)];\n      }\n    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {\n      delete columnsState.lookup[groupingColDefField];\n      columnsState.orderedFields = columnsState.orderedFields.filter(field => field !== groupingColDefField);\n    }\n    return columnsState;\n  }, [props.treeData, getGroupingColDef]);\n  const createRowTreeForTreeData = React.useCallback(params => {\n    if (!props.getTreeDataPath) {\n      throw new Error('MUI: No getTreeDataPath given.');\n    }\n    const getRowTreeBuilderNode = rowId => ({\n      id: rowId,\n      path: props.getTreeDataPath(params.dataRowIdToModelLookup[rowId]).map(key => ({\n        key,\n        field: null\n      }))\n    });\n    const onDuplicatePath = (firstId, secondId, path) => {\n      throw new Error(['MUI: The path returned by `getTreeDataPath` should be unique.', `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map(step => step.key))}.`].join('\\n'));\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: TREE_DATA_STRATEGY,\n        onDuplicatePath\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: TREE_DATA_STRATEGY\n    });\n  }, [props.getTreeDataPath, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(privateApiRef);\n    return filterRowTreeFromTreeData({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      disableChildrenFiltering: props.disableChildrenFiltering,\n      filterModel: params.filterModel,\n      apiRef: privateApiRef\n    });\n  }, [privateApiRef, props.disableChildrenFiltering]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(privateApiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: props.disableChildrenSorting,\n      shouldRenderGroupBelowLeaves: false\n    });\n  }, [privateApiRef, props.disableChildrenSorting]);\n  useGridRegisterPipeProcessor(privateApiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'rowTreeCreation', createRowTreeForTreeData);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability();\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability();\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [setStrategyAvailability]);\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","gridRowTreeSelector","useFirstRender","GRID_CHECKBOX_SELECTION_FIELD","useGridRegisterPipeProcessor","useGridRegisterStrategyProcessor","GRID_TREE_DATA_GROUPING_COL_DEF","GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES","filterRowTreeFromTreeData","TREE_DATA_STRATEGY","GridTreeDataGroupingCell","createRowTree","sortRowTree","updateRowTree","getVisibleRowsLookup","jsx","_jsx","useGridTreeDataPreProcessors","privateApiRef","props","setStrategyAvailability","useCallback","current","treeData","getGroupingColDef","_colDefOverride","groupingColDefProp","groupingColDef","colDefOverride","params","groupingName","fields","_ref","hideDescendantCount","colDefOverrideProperties","commonProperties","renderCell","headerName","getLocaleText","updateGroupingColumn","columnsState","groupingColDefField","field","shouldHaveGroupingColumn","prevGroupingColumn","lookup","newGroupingColumn","width","flex","index","orderedFields","slice","filter","createRowTreeForTreeData","getTreeDataPath","Error","getRowTreeBuilderNode","rowId","id","path","dataRowIdToModelLookup","map","key","onDuplicatePath","firstId","secondId","JSON","stringify","step","join","updates","type","previousTree","nodes","rows","defaultGroupingExpansionDepth","isGroupExpandedByDefault","inserted","actions","insert","modified","modify","removed","remove","previousTreeDepth","previousTreeDepths","filterRows","rowTree","isRowMatchingFilters","disableChildrenFiltering","filterModel","apiRef","sortRows","sortRowList","disableChildrenSorting","shouldRenderGroupBelowLeaves","isFirstRender","useRef","useEffect"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/useGridTreeDataPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"hideDescendantCount\"];\nimport * as React from 'react';\nimport { gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_TREE_DATA_GROUPING_COL_DEF, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES } from './gridTreeDataGroupColDef';\nimport { filterRowTreeFromTreeData, TREE_DATA_STRATEGY } from './gridTreeDataUtils';\nimport { GridTreeDataGroupingCell } from '../../../components';\nimport { createRowTree } from '../../../utils/tree/createRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nimport { updateRowTree } from '../../../utils/tree/updateRowTree';\nimport { getVisibleRowsLookup } from '../../../utils/tree/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridTreeDataPreProcessors = (privateApiRef, props) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    privateApiRef.current.setStrategyAvailability('rowTree', TREE_DATA_STRATEGY, props.treeData ? () => true : () => false);\n  }, [privateApiRef, props.treeData]);\n  const getGroupingColDef = React.useCallback(() => {\n    var _colDefOverride;\n    const groupingColDefProp = props.groupingColDef;\n    let colDefOverride;\n    if (typeof groupingColDefProp === 'function') {\n      const params = {\n        groupingName: TREE_DATA_STRATEGY,\n        fields: []\n      };\n      colDefOverride = groupingColDefProp(params);\n    } else {\n      colDefOverride = groupingColDefProp;\n    }\n    const _ref = (_colDefOverride = colDefOverride) != null ? _colDefOverride : {},\n      {\n        hideDescendantCount\n      } = _ref,\n      colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {\n      renderCell: params => /*#__PURE__*/_jsx(GridTreeDataGroupingCell, _extends({}, params, {\n        hideDescendantCount: hideDescendantCount\n      })),\n      headerName: privateApiRef.current.getLocaleText('treeDataGroupingHeaderName')\n    });\n    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);\n  }, [privateApiRef, props.groupingColDef]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;\n    const shouldHaveGroupingColumn = props.treeData;\n    const prevGroupingColumn = columnsState.lookup[groupingColDefField];\n    if (shouldHaveGroupingColumn) {\n      const newGroupingColumn = getGroupingColDef();\n      if (prevGroupingColumn) {\n        newGroupingColumn.width = prevGroupingColumn.width;\n        newGroupingColumn.flex = prevGroupingColumn.flex;\n      }\n      columnsState.lookup[groupingColDefField] = newGroupingColumn;\n      if (prevGroupingColumn == null) {\n        const index = columnsState.orderedFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n        columnsState.orderedFields = [...columnsState.orderedFields.slice(0, index), groupingColDefField, ...columnsState.orderedFields.slice(index)];\n      }\n    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {\n      delete columnsState.lookup[groupingColDefField];\n      columnsState.orderedFields = columnsState.orderedFields.filter(field => field !== groupingColDefField);\n    }\n    return columnsState;\n  }, [props.treeData, getGroupingColDef]);\n  const createRowTreeForTreeData = React.useCallback(params => {\n    if (!props.getTreeDataPath) {\n      throw new Error('MUI: No getTreeDataPath given.');\n    }\n    const getRowTreeBuilderNode = rowId => ({\n      id: rowId,\n      path: props.getTreeDataPath(params.dataRowIdToModelLookup[rowId]).map(key => ({\n        key,\n        field: null\n      }))\n    });\n    const onDuplicatePath = (firstId, secondId, path) => {\n      throw new Error(['MUI: The path returned by `getTreeDataPath` should be unique.', `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map(step => step.key))}.`].join('\\n'));\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: TREE_DATA_STRATEGY,\n        onDuplicatePath\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: TREE_DATA_STRATEGY\n    });\n  }, [props.getTreeDataPath, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(privateApiRef);\n    return filterRowTreeFromTreeData({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      disableChildrenFiltering: props.disableChildrenFiltering,\n      filterModel: params.filterModel,\n      apiRef: privateApiRef\n    });\n  }, [privateApiRef, props.disableChildrenFiltering]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(privateApiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: props.disableChildrenSorting,\n      shouldRenderGroupBelowLeaves: false\n    });\n  }, [privateApiRef, props.disableChildrenSorting]);\n  useGridRegisterPipeProcessor(privateApiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'rowTreeCreation', createRowTreeForTreeData);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(privateApiRef, TREE_DATA_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability();\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability();\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [setStrategyAvailability]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}