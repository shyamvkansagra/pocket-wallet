{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { getAvailableAggregationFunctions, addFooterRows, getAggregationRules, mergeStateWithAggregationModel } from './gridAggregationUtils';\nimport { wrapColumnWithAggregationValue, unwrapColumnFromAggregation } from './wrapColumnWithAggregation';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nexport const useGridAggregationPreProcessors = (apiRef, props) => {\n  // apiRef.current.caches.aggregation.rulesOnLastColumnHydration is not used because by the time\n  // that the pre-processor is called it will already have been updated with the current rules.\n  const rulesOnLastColumnHydration = React.useRef({});\n  const updateAggregatedColumns = React.useCallback(columnsState => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: columnsState.lookup,\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    columnsState.orderedFields.forEach(field => {\n      const shouldHaveAggregationValue = !!aggregationRules[field];\n      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];\n      let column = columnsState.lookup[field];\n      if (haveAggregationColumnValue) {\n        column = unwrapColumnFromAggregation({\n          column\n        });\n      }\n      if (shouldHaveAggregationValue) {\n        column = wrapColumnWithAggregationValue({\n          column,\n          aggregationRule: aggregationRules[field],\n          apiRef\n        });\n      }\n      columnsState.lookup[field] = column;\n    });\n    rulesOnLastColumnHydration.current = aggregationRules;\n    return columnsState;\n  }, [apiRef, props.aggregationFunctions, props.disableAggregation]);\n  const addGroupFooterRows = React.useCallback(value => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    const hasAggregationRule = Object.keys(aggregationRules).length > 0;\n\n    // If we did not have any aggregation footer before, and we still don't have any,\n    // Then we can skip this step\n    if (Object.keys(apiRef.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {\n      return value;\n    }\n    apiRef.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;\n    return addFooterRows({\n      apiRef,\n      groupingParams: value,\n      getAggregationPosition: props.getAggregationPosition,\n      hasAggregationRule\n    });\n  }, [apiRef, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableAggregation) {\n      return columnMenuItems;\n    }\n    const availableAggregationFunctions = getAvailableAggregationFunctions({\n      aggregationFunctions: props.aggregationFunctions,\n      colDef\n    });\n    if (availableAggregationFunctions.length === 0) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuAggregationItem'];\n  }, [props.aggregationFunctions, props.disableAggregation]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableAggregation) {\n      return prevState;\n    }\n    const aggregationModelToExport = gridAggregationModelSelector(apiRef);\n    if (Object.values(aggregationModelToExport).length === 0) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      aggregation: {\n        model: aggregationModelToExport\n      }\n    });\n  }, [apiRef, props.disableAggregation]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    if (props.disableAggregation) {\n      return params;\n    }\n    const aggregationModel = (_context$stateToResto = context.stateToRestore.aggregation) == null ? void 0 : _context$stateToResto.model;\n    if (aggregationModel != null) {\n      apiRef.current.setState(mergeStateWithAggregationModel(aggregationModel));\n    }\n    return params;\n  }, [apiRef, props.disableAggregation]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateAggregatedColumns);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addGroupFooterRows);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};","map":{"version":3,"names":["_extends","React","gridColumnLookupSelector","useGridRegisterPipeProcessor","getAvailableAggregationFunctions","addFooterRows","getAggregationRules","mergeStateWithAggregationModel","wrapColumnWithAggregationValue","unwrapColumnFromAggregation","gridAggregationModelSelector","useGridAggregationPreProcessors","apiRef","props","rulesOnLastColumnHydration","useRef","updateAggregatedColumns","useCallback","columnsState","aggregationRules","disableAggregation","columnsLookup","lookup","aggregationModel","aggregationFunctions","orderedFields","forEach","field","shouldHaveAggregationValue","haveAggregationColumnValue","current","column","aggregationRule","addGroupFooterRows","value","hasAggregationRule","Object","keys","length","caches","aggregation","rulesOnLastRowHydration","groupingParams","getAggregationPosition","addColumnMenuButtons","columnMenuItems","colDef","availableAggregationFunctions","stateExportPreProcessing","prevState","aggregationModelToExport","values","model","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","setState"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/useGridAggregationPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { getAvailableAggregationFunctions, addFooterRows, getAggregationRules, mergeStateWithAggregationModel } from './gridAggregationUtils';\nimport { wrapColumnWithAggregationValue, unwrapColumnFromAggregation } from './wrapColumnWithAggregation';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nexport const useGridAggregationPreProcessors = (apiRef, props) => {\n  // apiRef.current.caches.aggregation.rulesOnLastColumnHydration is not used because by the time\n  // that the pre-processor is called it will already have been updated with the current rules.\n  const rulesOnLastColumnHydration = React.useRef({});\n  const updateAggregatedColumns = React.useCallback(columnsState => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: columnsState.lookup,\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    columnsState.orderedFields.forEach(field => {\n      const shouldHaveAggregationValue = !!aggregationRules[field];\n      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];\n      let column = columnsState.lookup[field];\n      if (haveAggregationColumnValue) {\n        column = unwrapColumnFromAggregation({\n          column\n        });\n      }\n      if (shouldHaveAggregationValue) {\n        column = wrapColumnWithAggregationValue({\n          column,\n          aggregationRule: aggregationRules[field],\n          apiRef\n        });\n      }\n      columnsState.lookup[field] = column;\n    });\n    rulesOnLastColumnHydration.current = aggregationRules;\n    return columnsState;\n  }, [apiRef, props.aggregationFunctions, props.disableAggregation]);\n  const addGroupFooterRows = React.useCallback(value => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    const hasAggregationRule = Object.keys(aggregationRules).length > 0;\n\n    // If we did not have any aggregation footer before, and we still don't have any,\n    // Then we can skip this step\n    if (Object.keys(apiRef.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {\n      return value;\n    }\n    apiRef.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;\n    return addFooterRows({\n      apiRef,\n      groupingParams: value,\n      getAggregationPosition: props.getAggregationPosition,\n      hasAggregationRule\n    });\n  }, [apiRef, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableAggregation) {\n      return columnMenuItems;\n    }\n    const availableAggregationFunctions = getAvailableAggregationFunctions({\n      aggregationFunctions: props.aggregationFunctions,\n      colDef\n    });\n    if (availableAggregationFunctions.length === 0) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuAggregationItem'];\n  }, [props.aggregationFunctions, props.disableAggregation]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableAggregation) {\n      return prevState;\n    }\n    const aggregationModelToExport = gridAggregationModelSelector(apiRef);\n    if (Object.values(aggregationModelToExport).length === 0) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      aggregation: {\n        model: aggregationModelToExport\n      }\n    });\n  }, [apiRef, props.disableAggregation]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    if (props.disableAggregation) {\n      return params;\n    }\n    const aggregationModel = (_context$stateToResto = context.stateToRestore.aggregation) == null ? void 0 : _context$stateToResto.model;\n    if (aggregationModel != null) {\n      apiRef.current.setState(mergeStateWithAggregationModel(aggregationModel));\n    }\n    return params;\n  }, [apiRef, props.disableAggregation]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateAggregatedColumns);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addGroupFooterRows);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}