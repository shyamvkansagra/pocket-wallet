{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField } from '../../../utils/domUtils';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme();\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumns([colDefRef.current]);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n      if (colDefRef.current) {\n        var _colDefRef$current;\n        apiRef.current.publishEvent('columnWidthChange', {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum, _apiRef$current$heade, _apiRef$current$colum2;\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    const headerFilterRowElement = (_apiRef$current$heade = apiRef.current.headerFiltersElementRef) == null ? void 0 : _apiRef$current$heade.current;\n    if (headerFilterRowElement) {\n      headerFilterElementRef.current = headerFilterRowElement.querySelector(`[data-field=\"${colDef.field}\"]`);\n    }\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    colElementRef.current.style.pointerEvents = 'none';\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum3, _apiRef$current$colum4;\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    if (colElementRef.current) {\n      colElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, colElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventCallback","gridClasses","useGridApiEventHandler","useGridApiOptionHandler","useGridNativeEventListener","useGridLogger","clamp","findParentElementFromClassName","useTheme","findGridCellElementsFromCol","getFieldFromHeaderElem","findHeaderElementFromField","findGroupHeaderElementsFromField","cachedSupportsTouchActionNone","doesSupportTouchActionNone","undefined","CSS","supports","trackFinger","event","currentTouchId","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","element","direction","classList","contains","columnResizeStateInitializer","state","columnResize","resizingColumnField","useGridColumnResize","apiRef","props","logger","colDefRef","useRef","colElementRef","headerFilterElementRef","colGroupingElementRef","colCellElementsRef","theme","stopResizeEventTimeout","touchId","updateWidth","debug","current","field","prevWidth","offsetWidth","widthDiff","computedWidth","width","flex","style","minWidth","maxWidth","headerFilterElement","forEach","div","finalWidth","getAttribute","finishResize","nativeEvent","stopListening","updateColumns","clearTimeout","setTimeout","publishEvent","_colDefRef$current","colDef","handleResizeMouseUp","handleResizeMouseMove","buttons","getBoundingClientRect","params","handleColumnResizeMouseDown","_apiRef$current$colum","_apiRef$current$heade","_apiRef$current$colum2","button","currentTarget","preventDefault","columnHeadersContainerElementRef","querySelector","headerFilterRowElement","headerFiltersElementRef","doc","rootElementRef","body","cursor","addEventListener","pointerEvents","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","_apiRef$current$colum3","_apiRef$current$colum4","cellSeparator","target","columnHeader","getColumn","columnHeadersElementRef","useCallback","removeProperty","removeEventListener","handleResizeStart","setState","forceUpdate","handleResizeStop","useEffect","_apiRef$current$colum5","passive","onColumnResize","onColumnWidthChange"],"sources":["/Users/shyamkansagra/Documents/Code/general/pocket-wallet/node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField } from '../../../utils/domUtils';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme();\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumns([colDefRef.current]);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n      if (colDefRef.current) {\n        var _colDefRef$current;\n        apiRef.current.publishEvent('columnWidthChange', {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum, _apiRef$current$heade, _apiRef$current$colum2;\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    const headerFilterRowElement = (_apiRef$current$heade = apiRef.current.headerFiltersElementRef) == null ? void 0 : _apiRef$current$heade.current;\n    if (headerFilterRowElement) {\n      headerFilterElementRef.current = headerFilterRowElement.querySelector(`[data-field=\"${colDef.field}\"]`);\n    }\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    colElementRef.current.style.pointerEvents = 'none';\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum3, _apiRef$current$colum4;\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    if (colElementRef.current) {\n      colElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, colElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}